(function() {
	
	/**
	 * this controller is what will handle the queue wizard process
	 */
	var app = angular.module('queue-wizard').controller("QueueWizardController", function($rootScope, $scope, $state, $stateParams, $timeout, recipients, cards, usSpinnerService) {
				
		// load in user and relationships factories
    $scope.recipients = recipients;
    $scope.selectedRecipients = recipients.selectedRecipients; // selected recipients is simply passed in from the overarching controller that encompasses this UIRouter view as well as my people UIRouter view.
    // this view uses the same recipients model to transfer data
    $scope.stateParams = $stateParams;
    $scope.occasions = cards.occasions;
    $scope.cardFlavors = cards.cardFlavors;
    $scope.cards = cards;
    $scope.newCard = cards.newCard;

    // set the minimum recipient date
    $scope.minimumRecipientDate = recipientDate();
    $scope.minimumRecipientDateString = recipientDateString();

    $scope.testDate = new Date();
    $scope.verticalCenter = true;

		/**
		 * 			STEP ONE FUNCTIONS
		 */

    $scope.recipientNames = function() {
    	
    	recipients = $scope.selectedRecipients;
    	recipient_names = recipients.map(function(elem) {
    		return elem.first_name;
    	});

    	if (recipient_names.length > 0) {
				
				text        = '';
				conjunction = "and";
				comma       = '';
				ctr         = 1;
				max_names   = 4; // max # of names to show before we default to "others"
				
				keepGoing   = true;
    		angular.forEach(recipient_names, function(value) {

    			if (keepGoing) {

    				// this is where you will add the final value
	    			if (ctr == max_names) {
	    				keepGoing = false;

							remaining_count = (recipient_names.length+1) - ctr;
							other           = remaining_count > 1 ? "others" : "other";
							comma           += conjunction+' ';
							text            += comma + " " + remaining_count + " " + other;

	    			} else {

	    				text += comma+value;
							ctr++;
							if(recipient_names.length > 2){
								comma = ', ';
							} else {
								comma = ' ';
							}
							if(ctr == recipient_names.length) {
								comma += conjunction+' ';
							}
	    			}

    			}
				})
    	}
    	return text;
    }



		/**
		 * 				STEP TWO FUNCTIONS
		 */

    /**
     * select the flavor, which will refresh the card choices with the given filter specifities
     * @param  int flavor_id
     */
    $scope.selectFlavor = function(flavorID) {

    	console.log($scope.cards.occasionCards);
    	if (isInArray(flavorID, $scope.selectedFlavorIDs)) {
    		$scope.selectedFlavorIDs = arrayWithValueRemoved(flavorID, $scope.selectedFlavorIDs);
    	} else {
    		$scope.selectedFlavorIDs.push(flavorID);
    	}

    	allCards = $scope.cards.occasionCards;
    	selectedFlavorCards = []; // this will be array holding cards of specific flavor
    	flavorIDs = $scope.selectedFlavorIDs;

    	selectedFlavorCards = filterCardsOnFlavors(allCards, flavorIDs);
    	$scope.cards.selectableCards = selectedFlavorCards;

    	// first time card load view different from subsequent ones
    	if ($scope.spinCounter == 0) {
    		// this is where you will put in the timeout before spinning then displaying the card options
	    	$scope.cardsLoadingFirstTime = true;
	    	usSpinnerService.spin('card-find-spinner');
	    	$timeout(function() {
	    		usSpinnerService.stop('card-find-spinner');
					$scope.cardsLoadingFirstTime = false;
					$scope.cardsLoadedFirstTime  = true;
					$scope.cardsLoaded           = true;
	    	}, 1750);
    	} else {
    		randomTime = getRandomInt(800, 2250); // to make loading seem random
    		$scope.cardsLoading = true;
    		$scope.cardsLoaded = false;
    		usSpinnerService.spin('card-find-spinner');
	    	$timeout(function() {
	    		usSpinnerService.stop('card-find-spinner');
	    		$scope.cardsLoading = false;
	    		$scope.cardsLoaded = true;
	    	}, randomTime);	
    	}

    	$scope.cardsLoaded = false;
    	$scope.spinCounter++;
    	console.log($scope.selectedFlavorIDs);
    	
    }

    $scope.selectCard = function(card) {
    	$scope.cards.selectedCard = card;
    }

    // decide which side to preview
    $scope.selectPreviewSide = function(side) {
    	$scope.previewSide = side;
    }


    /**
     * 			SHARED / OVERARCHING FUNCTIONALITY
     */

   	// load new cards whenever occasion changes
		$scope.$watch('newCard.occasion', function(newValue, oldValue){
			occasionID = newValue;
      cards.getCardsForOccasion(occasionID);
     });

    // control what happens on each state of UI-Router
    $scope.$on('$stateChangeSuccess',
		  function(event, toState) {
		    $scope.currentState = toState.name;
		  }
		)

		$scope.isInArray = function(value, array) {
    	return array.indexOf(value) > -1;
    }

    // run more extensive tests here
		$scope.wizardStateisValid = function() {
			return true;
		}

		// view changes in state
		$rootScope.$on('$stateChangeStart', 
			function(event, toState, toParams, fromState, fromParams){ 
				currentState = toState.name;
				switch(currentState) {
					case "queue.home.step1":
						$scope.verticalCenter = true;
						break;
					case "queue.home.step2":
						$scope.verticalCenter = false;
						break;
					case "queue.home.step3":
						$scope.verticalCenter = true;
						break;
					case "queue.home.step4":
						$scope.verticalCenter = false;
						break;
				}
		})


		// get the next step for the wizard form
		$scope.nextStep = function() {
			currentState = $scope.currentState;
			switch(currentState) {
				case "queue.home.step1":

					// right now we are refreshing stuff if you GO to that page.

					// refresh spinner
			    $scope.spinCounter = 0;
					$scope.cardsLoadingFirstTime = false;
					$scope.cardsLoadedFirstTime  = false;
					$scope.cardsLoading = false; // second time loading
					$scope.cardsLoading = false; // second time loading

					$scope.previewSide = 'outside'; // default to outside view of card

					// refresh flavors
					$scope.selectedFlavorIDs = [];
					
					$state.go("queue.home.step2");
					break;
				case "queue.home.step2":
					$state.go("queue.home.step3");
					break;
				case "queue.home.step3":
					$state.go("queue.home.step4");
					break;
				case "queue.home.step4":
					break;
			}
		}

		// get previous step for the wizard form
		$scope.previousStep = function() {
			currentState = $scope.currentState;
			switch(currentState) {
				case "queue.home.step1":
					break;
				case "queue.home.step2":
					$state.go("queue.home.step1");
					break;
				case "queue.home.step3":
					$state.go("queue.home.step2");
					break;
				case "queue.home.step4":
					$state.go("queue.home.step3");
					break;
			}
		}
		
	});

})();

/**
 * return the recipient's date
 */
function recipientDate() {
	// minimum time is 2 weeks for now
	var recipientDate = new Date();
  recipientDate.setDate(recipientDate.getDate()+14);
  // var day = recipientDate.getDate();
  // var month = recipientDate.getMonth() + 1;
  // var year = recipientDate.getFullYear();
  // recipientDate = month+"/"+day+"/"+year;
  return recipientDate;
}

function recipientDateString() {
	var recipientDate = new Date();
  recipientDate.setDate(recipientDate.getDate()+14);
  var day = recipientDate.getDate();
  var month = recipientDate.getMonth() + 1;
  var year = recipientDate.getFullYear();
  recipientDate = year+"-"+month+"-"+day;
  return recipientDate;
}