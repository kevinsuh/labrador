(function() {
	
	/**
	 * this controller is specific to the managing relationship within the "Greeting Central" module
	 */
	var app = angular.module('card-queue').controller("ManageRecipientsController", function($rootScope, $scope, $state, $timeout, $modal, recipients, cards, usSpinnerService) {
				
			// load in user and relationships factories
      $scope.testImage = "/assets/blank_user.png";

			// new manage relationships feature!
			$scope.recipients               = recipients; // the "factory" recipients object
			$scope.relationships            = recipients.relationships;
			$scope.currentRecipients        = recipients.currentRecipients;
			$scope.visibleCurrentRecipients = angular.copy($scope.currentRecipients);
			$scope.newRecipient             = recipients.newRecipient;
			$scope.newRecipientTemplate     = recipients.newRecipientTemplate;
			$scope.relationships            = recipients.relationships;
			$scope.occasions                = cards.occasions;

			console.log($scope.currentRecipients);

			// test whether you are currently at this state or not
			$scope.$on('$stateChangeSuccess',
			  function(event, toState) {
			    $scope.currentState = toState.name;
			    makeStateActive($scope.currentState);
		    });

			// delete recipient
			$scope.deleteRecipient = function(recipient) {
				recipient_id = recipient.id
				if (confirm("Are you sure?")) {
					recipients.deleteRecipient(recipient)
		      .success(function(data) {
						// remove from current view
		      	$.each(recipients.currentRecipients, function(i) {
		      		if (recipients.currentRecipients[i].id === recipient_id) {
		      			recipients.currentRecipients.splice(i, 1);
		      			return false;
		      		}
		      	})
		      })
		      .error(function(data) {
	          console.log(data);
	        });
				}
			};

			// filter functionality
			$scope.recipientsFilter = "All";
			$scope.filterOptions = ["All", "Family", "Friends"];

			$scope.updateFilterView = function(filter) {
				
				allRecipients = $scope.currentRecipients;

				/* RELATIONSHIP_IDS FOR REFERENCE
				1: mother
				2: father
				3: sister
				4: brother
				5: male sig. other
				6: female sig. other
				7: male friend
				8: female friend
				9: grandmother
				10: grandfather
				11: mentor
				12: all
				13: son
				14: daughter
				 */
				
				switch (filter) {
					case "All":
						$scope.visibleCurrentRecipients = allRecipients;
						break;
					case "Family":
						$scope.visibleCurrentRecipients = allRecipients.filter(function(recipient) {
							return recipient.relationship_id == 1 ||
										 recipient.relationship_id == 2 ||
										 recipient.relationship_id == 3 ||
										 recipient.relationship_id == 4 ||
										 recipient.relationship_id == 9 ||
										 recipient.relationship_id == 10 ||
										 recipient.relationship_id == 13 ||
										 recipient.relationship_id == 14;
						});
						break;
					case "Friends":
						$scope.visibleCurrentRecipients = allRecipients.filter(function(recipient) {
							return recipient.relationship_id == 7 ||
										 recipient.relationship_id == 8;
						})
						break;
				}
			}

			// relationship modal functionality
			$scope.open_modal_form = function(recipient) {

				$modal.open({
					templateUrl: 'angular/manage_recipients/recipient_modal_form.html',
					backdrop: true,
					windowClass: 'modal',
					controller: function ($scope, $modalInstance, photo, relationships, occasions, recipients, currentRecipients) {

						$scope.recipients           = recipients; // the "factory" recipients object
						$scope.currentRecipients    = currentRecipients;
						$scope.recipient            = recipient;
						$scope.photo                = photo;
						$scope.relationships        = relationships;
						$scope.occasions            = occasions;

						$scope.newOccasion = function() {
							occasionTemplate = {
								recipient_occasion: {
									occasion_date: "",
									occasion_id: 7,
									recipient_id: $scope.recipient.id
								}
							};
							$scope.recipient.occasions.push(occasionTemplate);
						}

						isNewRecipient = (recipient.id > 0 ? false : true);

						$scope.cancel = function() {
							$modalInstance.dismiss('cancel');
						}

						// modal form submit
						$scope.submit = function() {

							recipients        = $scope.recipients; // factory recipients
							recipient         = $scope.recipient; // passed in recipient
							currentRecipients = $scope.currentRecipients; // existing recipients

							if (isNewRecipient) { // create

					    	recipients.createRecipient()
					      .success(function(data) {
					      	recipient = data.recipient
									recipients.currentRecipients.push(recipient)
									recipients.newRecipient = recipients.newRecipientTemplate;

					      })
					      .error(function(data) {
				          console.log("error in create recipient submit modal");
				          console.log(data);
				        });
							} else { // update
								
								recipients.updateRecipient(recipient)
								.success(function(data) {
									console.log(data);
								})
								.error(function(data) {
									console.log("error in update recipient modal");
									console.log(data);
								})
							}
							
							$modalInstance.dismiss('cancel');
						};
					},
					resolve: {
						photo: function() {
							return $scope.testImage;
						},
						relationships: function() {
							return $scope.relationships;
						},
						occasions: function() {
							return $scope.occasions;
						},
						recipients: function() {
							return $scope.recipients;
						},
						currentRecipients: function() {
							return $scope.currentRecipients;
						}
					},
					animation: false,
					size: "md",
					windowClass: "recipient_modal_form center_modal"
				});
			};
			
		});

	// date formatter from JSON to date type
	app.directive('jsonDate', function($filter) {
      return  {
          restrict: 'A',
          require: 'ngModel',
          link: function (scope, element, attrs, ngModel) {

             //format text going to user (model to view)
             ngModel.$formatters.push(function(value) {
                var date = new Date(value);
                return date;
             });

             //format text from the user (view to model)
             ngModel.$parsers.push(function(value) {
                var date = new Date(value);
                return date;
             });
         }
     }
   });

})();