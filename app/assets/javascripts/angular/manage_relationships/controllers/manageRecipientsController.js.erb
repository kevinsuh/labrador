(function() {
	
	/**
	 * this controller is specific to the managing relationship within the "Greeting Central" module
	 */
	var app = angular.module('card-queue').controller("ManageRecipientsController", function($rootScope, $scope, $state, $timeout, $modal, recipients, cards, usSpinnerService) {
				
			// load in user and relationships factories
      $scope.testImage = "/assets/blank_user.png";

			// new manage relationships feature!
			$scope.recipients           = recipients; // the "factory" recipients object
			$scope.relationships        = recipients.relationships;
			$scope.currentRecipients    = recipients.currentRecipients;
			$scope.newRecipient         = recipients.newRecipient;
			$scope.newRecipientTemplate = recipients.newRecipientTemplate;
			$scope.relationships        = recipients.relationships;
			$scope.occasions            = cards.occasions;

			console.log($scope.currentRecipients);

			// test whether you are currently at this state or not
			$scope.$on('$stateChangeSuccess',
			  function(event, toState) {
			    $scope.currentState = toState.name;
			    makeStateActive($scope.currentState);
		    });

			// delete recipient
			$scope.deleteRecipient = function(recipient) {
				recipient_id = recipient.id
				if (confirm("Are you sure?")) {
					recipients.deleteRecipient(recipient)
		      .success(function(data) {
						// remove from current view
		      	$.each(recipients.currentRecipients, function(i) {
		      		if (recipients.currentRecipients[i].id === recipient_id) {
		      			recipients.currentRecipients.splice(i, 1);
		      			return false;
		      		}
		      	})
		      })
		      .error(function(data) {
	          console.log(data);
	        });
				}
			};

			// opens up the modal form with the recipient model passed in
			// empty recipient model for create, filled in recipient for new
			$scope.open_modal_form = function(recipient) {

				$modal.open({
					templateUrl: 'angular/manage_recipients/recipient_modal_form.html',
					backdrop: true,
					windowClass: 'modal',
					controller: function ($scope, $modalInstance, photo, relationships, occasions, recipients, currentRecipients) {

						$scope.recipients           = recipients; // the "factory" recipients object
						$scope.currentRecipients    = currentRecipients;
						$scope.recipient            = recipient;
						$scope.photo                = photo;
						$scope.relationships        = relationships;
						$scope.occasions            = occasions;

						$scope.newOccasion = function() {
							occasionTemplate = {
								recipient_occasion: {
									occasion_date: "",
									occasion_id: 7,
									recipient_id: $scope.recipient.id
								}
							};
							$scope.recipient.occasions.push(occasionTemplate);
						}

						isNewRecipient = (recipient.id > 0 ? false : true);

						$scope.cancel = function() {
							$modalInstance.dismiss('cancel');
						}

						// modal form submit
						$scope.submit = function() {

							recipients        = $scope.recipients; // factory recipients
							recipient         = $scope.recipient; // passed in recipient
							currentRecipients = $scope.currentRecipients; // existing recipients

							if (isNewRecipient) { // create

					    	recipients.createRecipient()
					      .success(function(data) {
					      	recipient = data.recipient
									recipients.currentRecipients.push(recipient)
									recipients.newRecipient = recipients.newRecipientTemplate;

					      })
					      .error(function(data) {
				          console.log("error in create recipient submit modal");
				          console.log(data);
				        });
							} else { // update
								
								recipients.updateRecipient(recipient)
								.success(function(data) {
									console.log(data);
								})
								.error(function(data) {
									console.log("error in update recipient modal");
									console.log(data);
								})
							}
							
							$modalInstance.dismiss('cancel');
						};
					},
					resolve: {
						photo: function() {
							return $scope.testImage;
						},
						relationships: function() {
							return $scope.relationships;
						},
						occasions: function() {
							return $scope.occasions;
						},
						recipients: function() {
							return $scope.recipients;
						},
						currentRecipients: function() {
							return $scope.currentRecipients;
						}
					},
					animation: false,
					size: "md",
					windowClass: "recipient_modal_form center_modal"
				});
			};

			/**
			 * jQuery plugins to deal with outside of the app
			*/
			// side bar link
			/*
			var viewRecipientsButtonDOMElement = document.querySelector("#my_people");
			var viewRecipientsButton = angular.element(viewRecipientsButtonDOMElement);

			
			var homeLogoButtonDOMElement = document.querySelector("#home_logo");
			var homeLogoButton = angular.element(homeLogoButtonDOMElement);
			// go home on this click!
			homeLogoButton.on('click', function() {
				$state.go('home.app.step1');
			})
			*/
			
		});

	// date formatter from JSON to date type
	app.directive('jsonDate', function($filter) {
      return  {
          restrict: 'A',
          require: 'ngModel',
          link: function (scope, element, attrs, ngModel) {

             //format text going to user (model to view)
             ngModel.$formatters.push(function(value) {
                var date = new Date(value);
                return date;
             });

             //format text from the user (view to model)
             ngModel.$parsers.push(function(value) {
                var date = new Date(value);
                return date;
             });
         }
     }
   });

	app.controller('recipientOccasionsCtrl', function($scope) {
		
		// pre-fill certain events
		$scope.$watch('occasion_hash.recipient_occasion.occasion_id', function(newValue, oldValue){
				suggested_date = "";
        switch (newValue) {
          case 1: // christmas
            suggested_date = "12/25/15";
            break;
          case 2: // hannukah
            suggested_date = "12/6/15";
            break;
          case 3: // new year's
            suggested_date = "01/01/16";
            break;
          case 4: // mother's day
            suggested_date = "05/08/16";
            break;
          case 5: // father's day
            suggested_date = "06/19/16";
            break;
          case 13: // valentine's
            suggested_date = "02/14/16";
            break;
        }
        $scope.occasion_hash.recipient_occasion.occasion_date = suggested_date;
     });

	})

	app.controller('DatepickerDemoCtrl', function($scope) {
		$scope.today = function() {
	    $scope.dt = new Date();
	  };
	  $scope.today();

	  $scope.clear = function () {
	    $scope.dt = null;
	  };

	  // Disable weekend selection
	  $scope.disabled = function(date, mode) {
	    return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
	  };

	  $scope.toggleMin = function() {
	    $scope.minDate = $scope.minDate ? null : new Date();
	  };
	  $scope.toggleMin();
	  $scope.maxDate = new Date(2020, 5, 22);

	  $scope.open = function($event) {
	    $scope.status.opened = true;
	  };

	  $scope.dateOptions = {
	    formatYear: 'yy',
	    startingDay: 1
	  };

	  $scope.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
	  $scope.format = $scope.formats[0];

	  $scope.status = {
	    opened: false
	  };

	  var tomorrow = new Date();
	  tomorrow.setDate(tomorrow.getDate() + 1);
	  var afterTomorrow = new Date();
	  afterTomorrow.setDate(tomorrow.getDate() + 2);
	  $scope.events =
	    [
	      {
	        date: tomorrow,
	        status: 'full'
	      },
	      {
	        date: afterTomorrow,
	        status: 'partially'
	      }
	    ];

	  $scope.getDayClass = function(date, mode) {
	    if (mode === 'day') {
	      var dayToCheck = new Date(date).setHours(0,0,0,0);

	      for (var i=0;i<$scope.events.length;i++){
	        var currentDay = new Date($scope.events[i].date).setHours(0,0,0,0);

	        if (dayToCheck === currentDay) {
	          return $scope.events[i].status;
	        }
	      }
	    }

	    return '';
	  };
	});

})();