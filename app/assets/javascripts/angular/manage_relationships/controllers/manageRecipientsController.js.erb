(function() {
	
	/**
	 * this controller is specific to the managing relationship within the "Greeting Central" module
	 */
	var app = angular.module('card-queue').controller("ManageRecipientsController", function($rootScope, $location, $window, $stateParams, $scope, $state, $timeout, $modal, recipients, cards, occasions, usSpinnerService, FileUploader) {

		// infinite scroll once this angular controller is loaded
		ScaleContentToDevice();

		// new manage relationships feature!
		$scope.recipients               = recipients; // the "factory" recipients object
		$scope.relationships            = recipients.relationships;
		$scope.currentRecipients        = recipients.currentRecipients;
		$scope.newRecipient             = recipients.newRecipient;
		$scope.newRecipientTemplate     = recipients.newRecipientTemplate;
		$scope.relationships            = recipients.relationships;
		$scope.occasions                = cards.occasions;
		$scope.selectedRecipientIDs     = recipients.selectedRecipientIDs;

		$scope.stateParams = $stateParams;
		$scope.queueCardState = $stateParams.queueCardState;
		$scope.selectPersonToSendState = $stateParams.selectPersonToSendState;

		// unselect everyone if you are in "selectPersonToSendState"
		if ($scope.selectPersonToSendState == false) {
			$scope.selectedRecipientIDs = [];
		}

		// FOR QUEUE CARD WIZARD
		$scope.queueCardPage = {
			name: 'Occasion'
		};

		/**
		 * 			FILTER RECIPIENTS FUNCTIONALITY
		 */
		$scope.recipientsFilter = "All";
		$scope.filterOptions = ["All", "Family", "Friends"];
		$scope.filter = {
			filteredName: ""
		}

		headerTitle = angular.element(document.querySelector("#currentTitle"));
		headerTitle.text("My People");

		$scope.currentTitle = "My People";

		$scope.uploader = new FileUploader({
			url: "/recipients/upload_recipient_picture.json",
			headers: {
			  'X-Transaction': 'POST Example',
			  'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
			}
		});
		$scope.image = {
			myCroppedImage: " "
		};

		// new occasion defaulted to birthday
		// contains id, day, month, notes
		$scope.newRecipientOccasion = {
			recipient_occasion: {
				newOccasion: true,
				occasion_id: 7
			}
		};
		$scope.newRecipientOccasionTemplate = angular.copy($scope.newRecipientOccasion.recipient_occasion);

		// new address
		$scope.newRecipientAddress = {
			recipient_address: {
				newAddress: true
			}
		};
		$scope.newRecipientAddressTemplate = angular.copy($scope.newRecipientAddress.recipient_address);

		// by default set to new recipient
		$scope.isNewRecipient = true;
		$scope.selectedRecipient = angular.copy($scope.newRecipientTemplate);

		// whether the empty form fields should display when adding or editing a recipient
		$scope.newAddressForm = {
    	show: true
    };
    $scope.newOccasionForm = {
    	show: true
    };

		/**
		 * 		MY PEOPLE FOOTER
		 */
		 $scope.startQueueCardState = function() {
		 		$scope.queueCardState = true;
		 		if ($scope.selectedRecipientIDs.length < 1) {
		 			$scope.selectPersonToSendState = true;
		 		} else {
		 			$scope.selectPersonToSendState = false;
		 		}
		 }

		 // cancel your decision to queue a card
		 $scope.cancelQueueCardState = function() {
		 	$scope.queueCardState = false;
			$scope.selectPersonToSendState = false;
		 }

		 // the button to actually queue your cards
		 $scope.queueCard = function() {
		 	if ($scope.selectedRecipientIDs.length > 0) {
		 		$scope.myPeopleState = "Queue Wizard";
		 		$scope.queueCardPage.name = "Occasion";

		 		// get the occasions for selected recipients
		 		occasions.occasionsForRecipientIDs($scope.selectedRecipientIDs).success(function(data) {
	        occasions.occasionsForSelectedRecipients = data.occasions;
	        $scope.occasionsForSelectedRecipients = data.occasions;
	      });
		 	}
		 }

			// get rid of selectPersonToSendState upon selecting a recipient
			$scope.$watch('selectedRecipientIDs.length', function(newValue, oldValue){
			  if (newValue > 0) {
			  	$scope.selectPersonToSendState = false;
			  }
			});

		/**
		 * 		MY PEOPLE HEADER
		 */
		$scope.addPersonActive = false;
		$scope.deletePersonActive = false;
		$scope.searchPersonActive = false;

		$scope.myPeopleState = "Card View"; // options are "Card View", "Recipient Form", "Queue Wizard"

		$scope.editPersonToggle = function(recipient) {

			$scope.myPeopleState = "Recipient Form";

			$scope.isNewRecipient = false;
			$scope.selectedRecipient = recipient;
			// reset cropped image
  		$scope.image = {
				myCroppedImage: " "
			};

			// hide "new address form" if recipient has at least 1 saved address
			if (recipient.addresses.length > 0) {
				$scope.newAddressForm.show = false;
			}
			if (recipient.occasions.length > 0) {
				$scope.newOccasionForm.show = false;
			}

			// reset the final add forms when editing recipient
			$scope.newRecipientOccasion.recipient_occasion = angular.copy($scope.newRecipientOccasionTemplate);
			$scope.newRecipientAddress.recipient_address = angular.copy($scope.newRecipientAddressTemplate);

			// create backups in case user cancels
			$scope.selectedRecipientTemplate = angular.copy($scope.selectedRecipient);
			$scope.currentRecipientsTemplate = angular.copy($scope.currentRecipients);

			$scope.addPersonActive = !$scope.addPersonActive;
			$scope.deletePersonActive = false;
			$scope.searchPersonActive = false;
		}			

		$scope.addPersonToggle = function() {

			$scope.myPeopleState = "Recipient Form";

			// disabled if currently on recipient_form
			if ($scope.addPersonActive) {
				return;
			}

			// this will also lead to new recipient form
			$scope.isNewRecipient = true;
			$scope.selectedRecipient = angular.copy($scope.newRecipientTemplate);	

			// reset the new recipient form with templates when adding new
			$scope.image.myCroppedImage = " ";
			$scope.selectedRecipient.occasions = [];
			$scope.selectedRecipient.addresses = [];
			$scope.newRecipientOccasion.recipient_occasion = angular.copy($scope.newRecipientOccasionTemplate);
			$scope.newRecipientAddress.recipient_address = angular.copy($scope.newRecipientAddressTemplate);

			// always show new address/occasion form when adding recipient
			$scope.newAddressForm.show  = true;
			$scope.newOccasionForm.show = true;

			// create backups in case user cancels
			$scope.selectedRecipientTemplate = angular.copy($scope.selectedRecipient);
			$scope.currentRecipientsTemplate = angular.copy($scope.currentRecipients);

			$scope.addPersonActive = !$scope.addPersonActive;
			$scope.deletePersonActive = false;
			$scope.searchPersonActive = false;
		}

		$scope.deletePersonToggle = function() {

			// disabled if currently on recipient_form
			if ($scope.addPersonActive) {
				return;
			}

			// must need at least one recipient to delete
			if ($scope.selectedRecipientIDs == 0) {
				$scope.deletePersonActive = false;
			} else {
				$scope.deletePersonActive = !$scope.deletePersonActive;
				$scope.addPersonActive = false;
				$scope.searchPersonActive = false;
			}
			
		}

		$scope.searchPersonToggle = function() {

			// disabled if currently on recipient_form
			if ($scope.addPersonActive) {
				return;
			}

			$scope.searchPersonActive = !$scope.searchPersonActive;

			// if "unsearched" then don't filter anymore
			if ($scope.searchPersonActive == false) {
				$scope.filter.filteredName = "";
				$scope.recipientNameFilter($scope.filter.filteredName);
			}

			$scope.deletePersonActive = false;
			$scope.addPersonActive = false;
		}

		// test whether you are currently at this state or not
		$scope.$on('$stateChangeSuccess',
		  function(event, toState) {
		    $scope.currentState = toState.name;
		    makeStateActive($scope.currentState);
	    });

		/**
		 * get the recipient names based on array of selected recipients!
		 */
		$scope.recipientNames = function() {

			currentRecipients = $scope.currentRecipients;
			selectedRecipientIDs = $scope.selectedRecipientIDs;
			selectedRecipients = [];
			for (var i in currentRecipients) {
				if (isInArray(currentRecipients[i].id, selectedRecipientIDs)) {
					selectedRecipients.push(currentRecipients[i])
				}
			}

			recipient_names = selectedRecipients.map(function(elem) {
				return elem.first_name + " " + elem.last_name;
			});

			text = '';
			if (recipient_names.length > 0) {
				
				text        = '';
				conjunction = "and";
				comma       = '';
				ctr         = 1;
				max_names   = 10; // max # of names to show before we default to "others"
				
				keepGoing   = true;
				angular.forEach(recipient_names, function(value) {

					if (keepGoing) {

						// this is where you will add the final value
		  			if (ctr == max_names) {
		  				keepGoing = false;

							remaining_count = (recipient_names.length+1) - ctr;
							other           = remaining_count > 1 ? "others" : "other";
							comma           += conjunction+' ';
							text            += comma + " " + remaining_count + " " + other;

		  			} else {

		  				text += comma+value;
							ctr++;
							if(recipient_names.length > 2){
								comma = ', ';
							} else {
								comma = ' ';
							}
							if(ctr == recipient_names.length) {
								comma += conjunction+' ';
							}
		  			}

					}
				})
			}
			return text;
		}

		// this is for the trash delete button in my people cards view
		$scope.deleteSelectedRecipients = function() {
			selectedRecipientIDs = $scope.selectedRecipientIDs;
			recipients = $scope.recipients;
			recipients.deleteRecipients(selectedRecipientIDs)
			.success(function(data) {
				
				// upon success, delete all the currentRecipients that you deleted on the server side
				deletedRecipients = data.recipients;
				deletedRecipientIDs = deletedRecipients.map(function(recipient) {
					return recipient.id;
				});
				currentRecipients = $scope.currentRecipients;
				currentRecipientIDs = currentRecipients.map(function(recipient) {
					return recipient.id;
				});

				// this will go through each deletedRecipientID and remove currentRecipients of that recipientID
				$.each(deletedRecipientIDs, function(i) {
					recipientID = deletedRecipientIDs[i];
					if (isInArray(recipientID, currentRecipientIDs)) {
						
						var index = currentRecipientIDs.indexOf(recipientID);
						if (index > -1) {
							// splice both to keep the currentRecipientIDs array syncd with the scope.currentRecipients array
							currentRecipientIDs.splice(index, 1);
							$scope.currentRecipients.splice(index, 1);
						}
					}
				});
				// remove that delete active button and reset "selected" recipients
				$scope.deletePersonActive = false;
				$scope.selectedRecipientIDs = [];
			})
			.error(function(data) {
				console.log("error in delete selected recipients of manage recipients controller");
				console.log(data);
			})

		}

		// custom function to return days from today -- of next calendar year
		$scope.daysFromToday = function(month, day) {
			
			today = new Date();
			daysFromToday = daydiff(today, parseDateForNextOccasion(month, day));
			if (daysFromToday > 1) {
				return daysFromToday + " days";
			} else {
				return daysFromToday + " day";
			}
		}

		/**
		 * 			FILTER RECIPIENTS FUNCTIONALITY
		 */

		$scope.recipientNameFilter = function(name) {

			currentRecipients = $scope.currentRecipients;
			relationshipFilter = $scope.recipientsFilter;
			$scope.filter.filteredName = name;

			name = name.toLowerCase();

			visibleRecipients = filterArray("name", name, currentRecipients);
			visibleRecipients = filterArray("relationship", relationshipFilter, visibleRecipients)
			visibleRecipientIDs = visibleRecipients.map(function(item) { return item["id"]; });

			// use visible recipients to get the IDs
			for (index = 0; index < $scope.currentRecipients.length; ++index) {
				recipient = $scope.currentRecipients[index];
				recipient_id = recipient.id
				if (isInArray(recipient_id, visibleRecipientIDs)) {
					recipient.is_visible = 1;
				} else {
					recipient.is_visible = 0;
				}
			}
		};

		$scope.updateFilterView = function(filter) {
			
			currentRecipients = $scope.currentRecipients;
			$scope.recipientsFilter = filter;
			name = $scope.filter.filteredName;
			
			visibleRecipients = filterArray("relationship", filter, currentRecipients);
			visibleRecipients = filterArray("name", name, visibleRecipients);

			visibleRecipientIDs = visibleRecipients.map(function(item) { return item["id"]; });

			// use visible recipients to get the IDs
			for (index = 0; index < $scope.currentRecipients.length; ++index) {
				recipient = $scope.currentRecipients[index];
				recipient_id = recipient.id
				if (isInArray(recipient_id, visibleRecipientIDs)) {
					recipient.is_visible = 1;
				} else {
					recipient.is_visible = 0;
				}
			}
			
		}

		/**
		 * 			RECIPIENT CARD BUTTON OPTIONS
		 */
		$scope.select = function(recipient) {
			recipient_ids = $scope.selectedRecipientIDs;

			if (isInArray(recipient.id, recipient_ids)) {
				$scope.selectedRecipientIDs = arrayWithValueRemoved(recipient.id, $scope.selectedRecipientIDs);
			} else {
				$scope.selectedRecipientIDs.push(recipient.id);
			}
		};

		$scope.isInArray = function(value, array) {
		  return array.indexOf(value) > -1;
		}

		/**
		 * this is single queue, so this will become the only one to send to queue wizard
		 */
		$scope.single_queue = function(recipient) {
			recipients.selectedRecipientIDs = [recipient.id]
			recipient_ids = [recipient.id];
			$state.go("queue.home.step1", {recipients: recipient_ids});
		};

		/**
		 * this is 1+ queue, from the send card button. this will use all of the "selected recipients" to queue
		 */
		$scope.multiple_queue = function() {
			recipient_ids = recipients.selectedRecipientIDs.join();
			$state.go("queue.home.step1", {recipients: recipient_ids});
		};

		/**
		 * 		SAVE / CANCEL FUNCTIONALITY ON RECIPIENT FORM
		 */
		// create recipient submit
		$scope.saveRecipient = function() {

			recipients        = $scope.recipients; // factory recipients
			recipient         = $scope.selectedRecipient; // passed in recipient
			currentRecipients = $scope.currentRecipients; // existing recipients
			recipientIndex = arrayObjectIndexOf(currentRecipients, recipient.id, "id");
			isNewRecipient = $scope.isNewRecipient;
			fileUploader = $scope.uploader;

			// this is for if the last "form" is filled out when user hits save button before hitting the "add address" or "add occasion" button
			newOccasion = $scope.newRecipientOccasion.recipient_occasion;
			newAddress = $scope.newRecipientAddress.recipient_address;

			if (newOccasion.month && newOccasion.day) {
				recipient.occasions.push($scope.newRecipientOccasion);
			}
			if (newAddress.street && newAddress.city && newAddress.state && newAddress.zipcode) {
				recipient.addresses.push(newAddress);
			}

			if (isNewRecipient) { // create

	    	recipients.createRecipient(recipient)
	      .success(function(data) {

	      	recipient = data.recipient
	      	$scope.currentRecipients.push(recipient);
	      	$scope.selectedRecipient = recipient;

					// upload file after creating recipient
					fileUploader.uploadAll();

					// this will default back to home page
					$scope.addPersonActive = false;
					$scope.deletePersonActive = false;
					$scope.searchPersonActive = false;

					$scope.myPeopleState = "Card View";
					
	      })
	      .error(function(data) {
          console.log("error in create recipient submit modal");
          console.log(data);
        });
			} else { // update
				
				recipients.updateRecipient(recipient)
				.success(function(data) {
					// replace that existing recipient
					recipient = data.recipient;
					$scope.selectedRecipient = recipient;
					$scope.currentRecipients[recipientIndex] = recipient;

					// upload file after creating recipient
					fileUploader.uploadAll();

					// this will default back to home page
					$scope.addPersonActive = false;
					$scope.deletePersonActive = false;
					$scope.searchPersonActive = false;

					$scope.myPeopleState = "Card View";
				})
				.error(function(data) {
					console.log("error in update recipient modal");
					console.log(data);
				})
			}

		};

		// revert the work that was done
		$scope.cancelRecipient = function() {
			$scope.selectedRecipient = angular.copy($scope.selectedRecipientTemplate);
			$scope.currentRecipients = angular.copy($scope.currentRecipientsTemplate);

			$scope.addPersonActive = false;
			$scope.deletePersonActive = false;
			$scope.searchPersonActive = false;

			$scope.myPeopleState = "Card View";
		}

		// default my people state
		$scope.resetMyPeopleState = function() {

			$scope.addPersonActive    = false;
			$scope.deletePersonActive = false;
			$scope.searchPersonActive = false;
			$scope.queueCardState     = false;
			
			$scope.myPeopleState      = "Card View";	
		}

		$scope.$watch('myPeopleState', function(newValue, oldValue){
        if (newValue == 'Queue Wizard') {
        	headerTitle = angular.element(document.querySelector("#currentTitle"));
					headerTitle.text("Card Queue");
					$scope.currentTitle = "Card Queue";
        }
     });

		/**
		 * 		RECIPIENT FORM FUNCTIONALITY
		 */
		

		// callback on successful upload
		$scope.uploader.onSuccessItem = function(fileItem, response, status, headers) {
			//console.log("new success item");

			// update profile picture
			recipient = response.recipient;
			$scope.selectedRecipient = recipient;

			// $scope.recipients.updatePictureOnSuccess(response.recipient);
			// this is for updating recipient
      index = findWithAttr($scope.currentRecipients, 'id', recipient.id);
      $scope.recipients.currentRecipients[index] = recipient;
      $scope.currentRecipients[index] = recipient;

			//profile_picture_id = response.profile_picture_id;
			//$scope.recipients.updatePictureForRecipient($scope.recipient.id, profile_picture_id);
    };
		
	});

})();
