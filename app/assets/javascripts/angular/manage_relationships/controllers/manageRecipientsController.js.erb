(function() {
	
	/**
	 * this controller is specific to the managing relationship within the "Greeting Central" module
	 */
	var app = angular.module('card-queue').controller("ManageRecipientsController", function($rootScope, $location, $window, $scope, $state, $timeout, $modal, recipients, cards, usSpinnerService, FileUploader) {
				
			// load in user and relationships factories
      $scope.testImage = "/assets/blank_user.png";

			// new manage relationships feature!
			$scope.recipients               = recipients; // the "factory" recipients object
			$scope.relationships            = recipients.relationships;
			$scope.currentRecipients        = recipients.currentRecipients;
			$scope.visibleCurrentRecipients = angular.copy($scope.currentRecipients);
			$scope.newRecipient             = recipients.newRecipient;
			$scope.newRecipientTemplate     = recipients.newRecipientTemplate;
			$scope.relationships            = recipients.relationships;
			$scope.occasions                = cards.occasions;
			$scope.selectedRecipients       = recipients.selectedRecipients;
			$scope.selectedRecipientIDs     = recipients.selectedRecipientIDs;

			headerTitle = angular.element(document.querySelector("#currentTitle"));
			headerTitle.text("My People");

			// test whether you are currently at this state or not
			$scope.$on('$stateChangeSuccess',
			  function(event, toState) {
			    $scope.currentState = toState.name;
			    makeStateActive($scope.currentState);
		    });

			// delete recipient
			$scope.deleteRecipient = function(recipient) {
				recipient_id = recipient.id
				if (confirm("Are you sure?")) {
					recipients.deleteRecipient(recipient)
		      .success(function(data) {
						// remove from current view
		      	$.each(recipients.currentRecipients, function(i) {
		      		if (recipients.currentRecipients[i].id === recipient_id) {
		      			recipients.currentRecipients.splice(i, 1);
		      			return false;
		      		}
		      	})
		      })
		      .error(function(data) {
	          console.log(data);
	        });
				}
			};


			// test add event
			$scope.addEvent = function(recipient) {
				console.log("yay");
				console.log(recipient);

				testOccasion = recipient.occasions[0].recipient_occasion
				testRecipientOccasion = recipient.occasions[0].recipient_occasion
			}

			// filter recipients functionality
			$scope.recipientsFilter = "All";
			$scope.filterOptions = ["All", "Family", "Friends"];
			$scope.filteredName = "";

			$scope.recipientNameFilter = function(name) {

				allRecipients = $scope.currentRecipients;
				relationshipFilter = $scope.recipientsFilter;
				$scope.filteredName = name;

				name = name.toLowerCase();

				visibleRecipients = filterArray("name", name, allRecipients);
				visibleRecipients = filterArray("relationship", relationshipFilter, visibleRecipients)

				$scope.visibleCurrentRecipients = visibleRecipients;
			};

			$scope.updateFilterView = function(filter) {
				
				allRecipients = $scope.currentRecipients;
				$scope.recipientsFilter = filter;
				name = $scope.filteredName;
				
				visibleRecipients = filterArray("relationship", filter, allRecipients);
				visibleRecipients = filterArray("name", name, visibleRecipients);

				$scope.visibleCurrentRecipients = visibleRecipients;
				
			}

			/**
			 * 				START QUEUE WIZARD
			 */
			$scope.queueCardWizard = function() {
				
				$scope.selectedRecipients = [4,6,7];
				selectedRecipientsString = $scope.selectedRecipients.join();

				$window.location.href= "/queue_card/?user_id="+selectedRecipientsString+"/";

				// recipients.queueCardForRecipients().success(function(data) {
				// 	console.log(data);
				// 	//$location.path('/queue_card');
				// })
				//$window.location.href = "/queue_card?user_id="+selectedRecipientsString;


				 //recipients.queueCardForRecipients();
			}

			/**
			 * 			RECIPIENT CARD BUTTON OPTIONS
			 */
			$scope.select = function(recipient) {
				recipient_ids = recipients.selectedRecipientIDs;

				if ($scope.isInArray(recipient.id, recipient_ids)) {
					$scope.selectedRecipientIDs = arrayWithValueRemoved(recipient.id, $scope.selectedRecipientIDs);
				} else {
					$scope.selectedRecipientIDs.push(recipient.id);
				}
			};

			$scope.isInArray = function(value, array) {
				return array.indexOf(value) > -1;
			}

			/**
			 * this is single queue, so this will become the only one to send to queue wizard
			 */
			$scope.single_queue = function(recipient) {
				recipients.selectedRecipientIDs = [recipient.id]
				recipient_ids = [recipient.id];
				$state.go("queue.home", {recipients: recipient_ids});
			};

			/**
			 * this is 1+ queue, from the send card button. this will use all of the "selected recipients" to queue
			 */
			$scope.multiple_queue = function() {
				recipient_ids = recipients.selectedRecipientIDs.join();
				$state.go("queue.home", {recipients: recipient_ids});
			}

			/**
			 * 				RECIPIENT MODAL FORM
			 */
			$scope.open_modal_form = function(recipient) {

				$modal.open({
					templateUrl: 'angular/manage_recipients/recipient_modal_form.html',
					backdrop: true,
					windowClass: 'modal',
					controller: function ($scope, $modalInstance, photo, relationships, occasions, recipients, currentRecipients, fileUploader) {

						$scope.recipients           = recipients; // the "factory" recipients object
						$scope.currentRecipients    = currentRecipients;
						$scope.recipient            = recipient;
						$scope.photo                = photo;
						$scope.relationships        = relationships;
						$scope.occasions            = occasions;

						$scope.uploader = fileUploader // to handle recipient image uploads


						$scope.newOccasion = function() {
							occasionTemplate = {
								recipient_occasion: {
									occasion_date: "",
									occasion_id: 7,
									recipient_id: $scope.recipient.id
								}
							};
							$scope.recipient.occasions.push(occasionTemplate);
						}

						isNewRecipient = (recipient.id > 0 ? false : true);

						$scope.cancel = function() {
							$modalInstance.dismiss('cancel');
						}

						// modal form submit
						$scope.submit = function() {

							recipients        = $scope.recipients; // factory recipients
							recipient         = $scope.recipient; // passed in recipient
							currentRecipients = $scope.currentRecipients; // existing recipients
							recipientIndex = arrayObjectIndexOf(currentRecipients, recipient.id, "id");

							if (isNewRecipient) { // create

					    	recipients.createRecipient()
					      .success(function(data) {
					      	recipient = data.recipient
									recipients.currentRecipients.push(recipient)
									recipients.newRecipient = recipients.newRecipientTemplate;

					      })
					      .error(function(data) {
				          console.log("error in create recipient submit modal");
				          console.log(data);
				        });
							} else { // update
								
								recipients.updateRecipient(recipient)
								.success(function(data) {
									// replace that existing recipient
									recipient = data.recipient;
									$scope.currentRecipients[recipientIndex] = recipient;
								})
								.error(function(data) {
									console.log("error in update recipient modal");
									console.log(data);
								})
							}
							
							$modalInstance.dismiss('cancel');
						};
					},
					resolve: {
						photo: function() {
							return $scope.testImage;
						},
						relationships: function() {
							return $scope.relationships;
						},
						occasions: function() {
							return $scope.occasions;
						},
						recipients: function() {
							return $scope.recipients;
						},
						currentRecipients: function() {
							return $scope.currentRecipients;
						},
						fileUploader: function() {
							return new FileUploader({url: "/recipients/update_for_current"}); // to handle recipient image uploads
						}
					},
					animation: false,
					size: "md",
					windowClass: "recipient_modal_form center_modal"
				});
			};
			
		});

	// date formatter from JSON to date type
	app.directive('jsonDate', function($filter) {
      return  {
          restrict: 'A',
          require: 'ngModel',
          link: function (scope, element, attrs, ngModel) {

             //format text going to user (model to view)
             ngModel.$formatters.push(function(value) {
                var date = new Date(value);
                return date;
             });

             //format text from the user (view to model)
             ngModel.$parsers.push(function(value) {
                var date = new Date(value);
                return date;
             });
         }
     }
   });


	 /**
    * The ng-thumb directive
    * @author: nerv
    * @version: 0.1.2, 2014-01-09
    */
    app.directive('ngThumb', ['$window', function($window) {
        var helper = {
            support: !!($window.FileReader && $window.CanvasRenderingContext2D),
            isFile: function(item) {
                return angular.isObject(item) && item instanceof $window.File;
            },
            isImage: function(file) {
                var type =  '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
                return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
            }
        };

        return {
            restrict: 'A',
            template: '<canvas/>',
            link: function(scope, element, attributes) {
                if (!helper.support) return;

                var params = scope.$eval(attributes.ngThumb);

                if (!helper.isFile(params.file)) return;
                if (!helper.isImage(params.file)) return;

                var canvas = element.find('canvas');
                var reader = new FileReader();

                reader.onload = onLoadFile;
                reader.readAsDataURL(params.file);

                function onLoadFile(event) {
                    var img = new Image();
                    img.onload = onLoadImage;
                    img.src = event.target.result;
                }

                function onLoadImage() {
                    var width = params.width || this.width / this.height * params.height;
                    var height = params.height || this.height / this.width * params.width;
                    canvas.attr({ width: width, height: height });
                    canvas[0].getContext('2d').drawImage(this, 0, 0, width, height);
                }
            }
        };
    }]);

})();

/**
 * find the index of an array that contains the object
 */
function arrayObjectIndexOf(myArray, searchTerm, property) {
    for(var i = 0, len = myArray.length; i < len; i++) {
        if (myArray[i][property] === searchTerm) return i;
    }
    return -1;
}

// filter the array to another level based on the filterType and filterTerm
function filterArray(filterType, filterTerm, startingArray) {
	var finalArray = [];
	if (filterType == "relationship") {
		/* RELATIONSHIP_IDS FOR REFERENCE
		1: mother
		2: father
		3: sister
		4: brother
		5: male sig. other
		6: female sig. other
		7: male friend
		8: female friend
		9: grandmother
		10: grandfather
		11: mentor
		12: all
		13: son
		14: daughter
		 */
	switch (filterTerm) {
		case "All":
			finalArray = startingArray;
			break;
		case "Family":
			finalArray = startingArray.filter(function(recipient) {
					return recipient.relationship_id == 1 ||
								 recipient.relationship_id == 2 ||
								 recipient.relationship_id == 3 ||
								 recipient.relationship_id == 4 ||
								 recipient.relationship_id == 9 ||
								 recipient.relationship_id == 10 ||
								 recipient.relationship_id == 13 ||
								 recipient.relationship_id == 14;
				});
			break;
		case "Friends":
			finalArray = startingArray.filter(function(recipient) {
					return recipient.relationship_id == 7 ||
								 recipient.relationship_id == 8;
				})
			break;
		}
	} else if (filterType == "name") {
		if (filterTerm == "") {
			finalArray = startingArray;
		} else {
			searchLength = filterTerm.length;
			finalArray = startingArray.filter(function(recipient) {
				full_name = recipient.first_name + " " + recipient.last_name;
				
				return full_name.substring(0, searchLength).toLowerCase() == filterTerm;
			});

		}
	}
	return finalArray;
}

function arrayWithValueRemoved(value, array) {
	var index = array.indexOf(value);
	if (index > -1) {
		array.splice(index, 1);
	}
	return array;
}


