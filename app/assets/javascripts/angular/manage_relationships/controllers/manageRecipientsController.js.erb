(function() {
	
	/**
	 * this controller is specific to the managing relationship within the "Greeting Central" module
	 */
	var app = angular.module('card-queue').controller("ManageRecipientsController", function($rootScope, $location, $window, $scope, $state, $timeout, $modal, recipients, cards, usSpinnerService, FileUploader) {
				

			// new manage relationships feature!
			$scope.recipients               = recipients; // the "factory" recipients object
			$scope.relationships            = recipients.relationships;
			$scope.currentRecipients        = recipients.currentRecipients;
			$scope.newRecipient             = recipients.newRecipient;
			$scope.newRecipientTemplate     = recipients.newRecipientTemplate;
			$scope.relationships            = recipients.relationships;
			$scope.occasions                = cards.occasions;
			$scope.selectedRecipients       = recipients.selectedRecipients;
			$scope.selectedRecipientIDs     = recipients.selectedRecipientIDs;

			headerTitle = angular.element(document.querySelector("#currentTitle"));
			headerTitle.text("My People");

			// test whether you are currently at this state or not
			$scope.$on('$stateChangeSuccess',
			  function(event, toState) {
			    $scope.currentState = toState.name;
			    makeStateActive($scope.currentState);
		    });

			// delete recipient
			$scope.deleteRecipient = function(recipient) {
				recipient_id = recipient.id
				if (confirm("Are you sure?")) {
					recipients.deleteRecipient(recipient)
		      .success(function(data) {
						// remove from current view
		      	$.each(recipients.currentRecipients, function(i) {
		      		if (recipients.currentRecipients[i].id === recipient_id) {
		      			recipients.currentRecipients.splice(i, 1);
		      			return false;
		      		}
		      	})
		      })
		      .error(function(data) {
	          console.log(data);
	        });
				}
			};

			// this is for the trash delete button in my people cards view
			$scope.deleteSelectedRecipients = function() {
				selectedRecipientIDs = $scope.selectedRecipientIDs;
				if (confirm("Are you sure?")) {

					recipients.deleteRecipients(selectedRecipientIDs)
					.success(function(data) {
						
						// upon success, delete all the currentRecipients that you deleted on the server side
						deletedRecipients = data.recipients;
						deletedRecipientIDs = deletedRecipients.map(function(recipient) {
							return recipient.id;
						});
						currentRecipients = $scope.currentRecipients;
						currentRecipientIDs = currentRecipients.map(function(recipient) {
							return recipient.id;
						});

						// this will go through each deletedRecipientID and remove currentRecipients of that recipientID
						$.each(deletedRecipientIDs, function(i) {
							recipientID = deletedRecipientIDs[i];
							if (isInArray(recipientID, currentRecipientIDs)) {
								
								var index = currentRecipientIDs.indexOf(recipientID);
								if (index > -1) {
									// splice both to keep the currentRecipientIDs array syncd with the scope.currentRecipients array
									currentRecipientIDs.splice(index, 1);
									$scope.currentRecipients.splice(index, 1);
								}
							}
						});

					})
					.error(function(data) {
						console.log("error in delete selected recipients of manage recipients controller");
						console.log(data);
					})

					// recipients.deleteRecipient(recipient)
		   //    .success(function(data) {
					// 	// remove from current view
		   //    	$.each(recipients.currentRecipients, function(i) {
		   //    		if (recipients.currentRecipients[i].id === recipient_id) {
		   //    			recipients.currentRecipients.splice(i, 1);
		   //    			return false;
		   //    		}
		   //    	})
		   //    })
		   //    .error(function(data) {
	    //       console.log(data);
	    //     });

				}
			}

			// custom function to return days from today -- of next calendar year
			// dateString = (ex. 2/12/1992)
			$scope.daysFromToday = function(dateString) {
				
				today = new Date();
				daysFromToday = daydiff(today, parseDateForNextOccasion(dateString));
				if (daysFromToday > 1) {
					return daysFromToday + " days";
				} else {
					return daysFromToday + " day";
				}
			}

			/**
			 * 			FILTER RECIPIENTS FUNCTIONALITY
			 */
			$scope.recipientsFilter = "All";
			$scope.filterOptions = ["All", "Family", "Friends"];
			$scope.filteredName = "";

			$scope.recipientNameFilter = function(name) {

				currentRecipients = $scope.currentRecipients;
				relationshipFilter = $scope.recipientsFilter;
				$scope.filteredName = name;

				name = name.toLowerCase();

				visibleRecipients = filterArray("name", name, currentRecipients);
				visibleRecipients = filterArray("relationship", relationshipFilter, visibleRecipients)
				visibleRecipientIDs = visibleRecipients.map(function(item) { return item["id"]; });

				// use visible recipients to get the IDs
				for (index = 0; index < $scope.currentRecipients.length; ++index) {
					recipient = $scope.currentRecipients[index];
					recipient_id = recipient.id
					if (isInArray(recipient_id, visibleRecipientIDs)) {
						recipient.is_visible = 1;
					} else {
						recipient.is_visible = 0;
					}
				}
			};

			$scope.updateFilterView = function(filter) {
				
				currentRecipients = $scope.currentRecipients;
				$scope.recipientsFilter = filter;
				name = $scope.filteredName;
				
				visibleRecipients = filterArray("relationship", filter, currentRecipients);
				visibleRecipients = filterArray("name", name, visibleRecipients);

				visibleRecipientIDs = visibleRecipients.map(function(item) { return item["id"]; });

				// use visible recipients to get the IDs
				for (index = 0; index < $scope.currentRecipients.length; ++index) {
					recipient = $scope.currentRecipients[index];
					recipient_id = recipient.id
					if (isInArray(recipient_id, visibleRecipientIDs)) {
						recipient.is_visible = 1;
					} else {
						recipient.is_visible = 0;
					}
				}
				
			}

			/**
			 * 			INDIVIDUAL OVERLAY CONFIG
			 */
			$scope.displayOverlay = function() {
				this.viewOverlay = true;
			}

			$scope.hideOverlay = function() {
				this.viewOverlay = false;
			}

			$scope.toggleOverlay = function() {
				this.viewOverlay = !this.viewOverlay;
			}

			/**
			 * 			RECIPIENT CARD BUTTON OPTIONS
			 */
			$scope.select = function(recipient) {
				recipient_ids = recipients.selectedRecipientIDs;

				if (isInArray(recipient.id, recipient_ids)) {
					$scope.selectedRecipientIDs = arrayWithValueRemoved(recipient.id, $scope.selectedRecipientIDs);
				} else {
					$scope.selectedRecipientIDs.push(recipient.id);
				}
			};

			$scope.isInArray = function(value, array) {
			  return array.indexOf(value) > -1;
			}

			/**
			 * this is single queue, so this will become the only one to send to queue wizard
			 */
			$scope.single_queue = function(recipient) {
				recipients.selectedRecipientIDs = [recipient.id]
				recipient_ids = [recipient.id];
				$state.go("queue.home.step1", {recipients: recipient_ids});
			};

			/**
			 * this is 1+ queue, from the send card button. this will use all of the "selected recipients" to queue
			 */
			$scope.multiple_queue = function() {
				recipient_ids = recipients.selectedRecipientIDs.join();
				$state.go("queue.home.step1", {recipients: recipient_ids});
			}

			/**
			 * 				RECIPIENT MODAL FORM
			 */
			$scope.open_modal_form = function(recipient) {

				$modal.open({
					templateUrl: 'angular/manage_recipients/recipient_modal_form.html',
					backdrop: 'static',
					animation: false,
					windowClass: "recipient_modal_form center_modal",
					controller: function ($scope, $modalInstance, relationships, occasions, recipients, currentRecipients) {

						$scope.recipients           = recipients; // the "factory" recipients object
						$scope.currentRecipients    = currentRecipients;
						$scope.recipient            = recipient;
						$scope.relationships        = relationships;
						$scope.occasions            = occasions;
						isNewRecipient = (recipient.id > 0 ? false : true);

						console.log($scope.recipient);

						$scope.uploader = new FileUploader({
							url: "/recipients/upload_recipient_picture.json",
							headers: {
							  'X-Transaction': 'POST Example',
							  'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
							}
						});

						// callback on successful upload
						$scope.uploader.onSuccessItem = function(fileItem, response, status, headers) {
							console.log("new success item");
							console.log(response);
							// update profile picture
							recipient = response.recipient;
							$scope.recipient = recipient;
							// $scope.recipients.updatePictureOnSuccess(response.recipient);
				      index = findWithAttr($scope.currentRecipients, 'id', recipient.id);
				      console.log(index);
				      console.log(recipient);
				      recipients.currentRecipients[index] = recipient;
				      $scope.recipients.currentRecipients[index] = recipient;
				      console.log($scope.currentRecipients);
				      console.log(recipients.currentRecipients);

							//profile_picture_id = response.profile_picture_id;
							//$scope.recipients.updatePictureForRecipient($scope.recipient.id, profile_picture_id);
			      };

						$scope.newOccasion = function() {
							occasionTemplate = {
								recipient_occasion: {
									occasion_date: "",
									occasion_id: 7,
									recipient_id: $scope.recipient.id
								}
							};
							$scope.recipient.occasions.push(occasionTemplate);
						}

						// remove this occasion on modal form
						$scope.removeOccasion = function(occasion_hash) {

							// find index where the recipient_occasion id equals this occasion_hash's recipient_occasion id
							occasion_hashes = $scope.recipient.occasions;
							recipient_occasion_id = occasion_hash.recipient_occasion.id;
							index = -1;

							for(var i = 0; i < occasion_hashes.length; i += 1) {
				        if(occasion_hashes[i].recipient_occasion.id === recipient_occasion_id) {
				            index = i;
				        }
					    }

					    // if recipient_occasion_id is found, remove it from recipients occasions
					    new_occasion_hashes = arrayWithIndexRemoved(index, occasion_hashes);
				    	$scope.recipient.occasions = new_occasion_hashes

						}

						$scope.cancel = function() {
							$modalInstance.dismiss('cancel');
						}

						// delete recipient on modal
						$scope.deleteRecipient = function(recipient) {
							recipient_id = recipient.id
							if (confirm("Are you sure?")) {
								recipients.deleteRecipient(recipient)
					      .success(function(data) {
									// remove from current view
					      	$.each(currentRecipients, function(i) {
					      		if (currentRecipients[i].id === recipient_id) {
					      			recipients.currentRecipients.splice(i, 1);
					      			return false;
					      		}
					      	})
					      	$modalInstance.dismiss('cancel');
					      })
					      .error(function(data) {
				          console.log(data);
				        });
							}
						};

						// modal form submit
						$scope.submit = function() {

							recipients        = $scope.recipients; // factory recipients
							recipient         = $scope.recipient; // passed in recipient
							currentRecipients = $scope.currentRecipients; // existing recipients
							recipientIndex = arrayObjectIndexOf(currentRecipients, recipient.id, "id");

							fileUploader = $scope.uploader;

							console.log(recipient);

							if (isNewRecipient) { // create

					    	recipients.createRecipient()
					      .success(function(data) {
					      	recipient = data.recipient
					      	$scope.recipient = data.recipient;
									recipients.currentRecipients.push(recipient)
									recipients.newRecipient = recipients.newRecipientTemplate;

									// upload file after creating recipient
									fileUploader.uploadAll();
					      })
					      .error(function(data) {
				          console.log("error in create recipient submit modal");
				          console.log(data);
				        });
							} else { // update
								
								recipients.updateRecipient(recipient)
								.success(function(data) {
									// replace that existing recipient
									recipient = data.recipient;
									$scope.currentRecipients[recipientIndex] = recipient;

									// upload file after creating recipient
									fileUploader.uploadAll();
								})
								.error(function(data) {
									console.log("error in update recipient modal");
									console.log(data);
								})
							}

							$modalInstance.dismiss('cancel');
						};

					},
					resolve: {
						relationships: function() {
							return $scope.relationships;
						},
						occasions: function() {
							return $scope.occasions;
						},
						recipients: function() {
							return recipients;
						},
						currentRecipients: function() {
							return recipients.currentRecipients;
						}
					}
				});
			};
			
		});

})();
