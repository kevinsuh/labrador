(function() {
	
	/**
	 * this controller is specific for user viewing his queued / purchased cards
	 */
	var app = angular.module('card-queue').controller("SettingsController", function($rootScope, $location, $window, $scope, $state, $timeout, user, stripe) {
			
		headerTitle = angular.element(document.querySelector("#currentTitle"));
		headerTitle.text("Settings");

		// infinite scroll once this angular controller is loaded
		ScaleContentToDevice();

		$scope.currentTitle = "Settings";

		$scope.currentUser = user.currentUser;

		// create backups in case user cancels
		$scope.currentUserTemplate = angular.copy($scope.currentUser);

		// test whether you are currently at this state or not
		$scope.$on('$stateChangeSuccess',
		  function(event, toState) {
		    $scope.currentState = toState.name;
		    makeStateActive($scope.currentState);
		  });

		/**
		 * 		HANDLE NAVIGATION OF TABS
		 */
		$scope.settings = {
			displayState: "Home"
		}

		$scope.showPersonalInfoTab = function() {
			$scope.newUserAddress.address = angular.copy($scope.newUserAddressTemplate);
			$scope.settings.displayState = "Personal Info Form";
		}

		$scope.showHomeTab = function() {
			$scope.settings.displayState = "Home";	
		}

		$scope.showPaymentTab = function() {
			$scope.settings.displayState = "Payment Form";	
		}

		/**
		 * 		FOR HANDLING NEW FORMS
		 */
		
		// new address
		$scope.newUserAddress = {
			address: {
				newAddress: true,
				is_primary: true
			}
		};
		$scope.newUserAddressTemplate = angular.copy($scope.newUserAddress.address);

		// new payment
		$scope.newUserPayment = {
			payment: {
				newPayment: true,
				is_primary: true,
				country: "US"
			}
		};
		$scope.newUserPaymentTemplate = angular.copy($scope.newUserPayment.payment);

		/**
		 * 		FOR HANDLING ALERTS AT TOP OF HEADER
		 */
		$scope.personalInfoAlerts = [];
		$scope.paymentAlerts      = [];

		$scope.closePersonalInfoAlert = function(index) {
	    $scope.personalInfoAlerts.splice(index, 1);
	  };

	  $scope.closePaymentAlert = function(index) {
	    $scope.paymentAlerts.splice(index, 1);
	  };

		/**
		 * 		SAVE / CANCEL FUNCTIONALITY ON PERSONAL INFO FORM
		 */
		$scope.savePersonalInfo = function() {

			currentUser = $scope.currentUser;
			newAddress  = $scope.newUserAddress.address;

			// add if it is a "new address" and has the right criteria
			if (newAddress.newAddress && newAddress.street && newAddress.city && newAddress.state && newAddress.zipcode) {
				currentUser.addresses.push(newAddress);
			}

			user.updateUser(currentUser)
			.success(function(data) {
				console.log("success in updating user");
				console.log(data);
				currentUser = data.user;
				$scope.currentUser = currentUser;
				$scope.settings.displayState = "Home";
			})
			.error(function(data) {
				console.log("error in update user settings");
				console.log(data);
			})
		}

		$scope.cancelPersonalInfo = function() {

			// reset back to template
			$scope.currentUser = angular.copy($scope.currentUserTemplate);
			$scope.settings.displayState = "Home";
		}

		/**
		 * 		SAVE / CANCEL FUNCTIONALITY ON PAYMENT FORM
		 */
		$scope.savePayment = function() {
			console.log("in save payment function!");
			console.log($scope.newUserPayment);

			newUserPayment = $scope.newUserPayment.payment;
			street         = newUserPayment.address_line1;
			state          = newUserPayment.address_state;
			city           = newUserPayment.address_city;
			zip            = newUserPayment.address_zip;

			if (street && state && city && zip) {

				// temp fix against not putting in a CVC
				if (!newUserPayment.cvc) {
					err = { message: "Please enter a CVC." };
					$scope.paymentAlerts.push({type: "danger", msg: err.message});
					return;
				}

				// now in here you can create a payment with all of the necessary parameters (card + billing address details)
				return stripe.card.createToken({
					number: newUserPayment.number,
					cvc: newUserPayment.cvc,
					exp_month: newUserPayment.exp_month,
					exp_year: newUserPayment.exp_year,
					name: newUserPayment.name,
					address_line1: newUserPayment.address_line1,
					address_line2: newUserPayment.address_line2,
					address_city: newUserPayment.address_city,
					address_state: newUserPayment.address_state,
					address_zip: newUserPayment.address_zip,
					address_country: newUserPayment.country
				})
				.then(function(data) {
					
					cardToken = data.id;
					card      = data.card;
					isPrimary = newUserPayment.is_primary;

					// save this to our database now
					user.createPayment(cardToken, isPrimary)
					.success(function(data) {

						// update current user's primary card if successful
						if (isPrimary) {
							$scope.currentUser.primary_card = card;
						}
						
						// this is where you can now bring them back to card list
	    		 	$scope.currentUser.stripe_customer.sources.data.push(card);
	      		$scope.settings.displayState = "Home";

					})
					.error(function(data) {
						console.log("error in user createPayment function");
						console.log(data);
					});
				})
				.catch(function(err) {
					if (err.type && /^Stripe/.test(err.type)) {
	          console.log('Stripe error: ', err.message);
	        }
	        $scope.paymentAlerts.push({type: "danger", msg: err.message});
				});
			} else {
				err = { message: "Please fully fill your billing address." };
				$scope.paymentAlerts.push({type: "danger", msg: err.message});
			}

			
		}

		$scope.cancelPayment = function() {

			// reset back to template
			$scope.currentUser = angular.copy($scope.currentUserTemplate);
			$scope.settings.displayState = "Home";

		}

		/**
		 * 		SETTINGS FOOTER
		 */
		$scope.startQueueCardState = function() {
			// automatically just go to my people if in this view
			$state.go("main.app.my_people.home", {queueCardState: true, selectPersonToSendState: true});
		 }

	});

})();
