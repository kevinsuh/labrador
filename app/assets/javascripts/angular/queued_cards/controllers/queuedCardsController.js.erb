(function() {
	
	/**
	 * this controller is specific for user viewing his queued / purchased cards
	 */
	var app = angular.module('card-queue').controller("QueuedCardsController", function($rootScope, $location, $window, $scope, $state, $timeout, cards, usSpinnerService) {
			
		$scope.cards            = cards;
		$scope.queuedCards      = cards.queuedCards;
		$scope.purchasedCards   = cards.purchasedCards;
		$scope.selectedOrderIDs = [];
		$scope.tableView        = 'queued';

		// infinite scroll once this angular controller is loaded
		ScaleContentToDevice();

		console.log($scope.queuedCards);

		headerTitle = angular.element(document.querySelector("#currentTitle"));
		queuedCardsCount = $scope.queuedCards.length;
		headerTitle.text("Queued Cards ("+queuedCardsCount+")");

		$scope.currentTitle = "Queued Cards ("+queuedCardsCount+")";

		// test whether you are currently at this state or not
		$scope.$on('$stateChangeSuccess',
		  function(event, toState) {
		    $scope.currentState = toState.name;
		    makeStateActive($scope.currentState);
		  });

		/**
		 * choose which table view you want to display, either queued or purchased cards
		 * @param {string} cardStatus 'queued' or 'purchased'
		 */
		$scope.setTableView = function(cardStatus) {
			$scope.tableView = cardStatus;
			if (cardStatus == 'purchased') {
				$scope.selectedOrderIDs = [];
			}
		}

		/**
		 * 			FILTER FUNCTIONALITY
		 */
		
		$scope.filteredName = ""; // recipient name filter to put in the input

		/**
		 * this takes the name filter, and returns all of the queued cards that have recipients that match the name filter
		 *
		 * it works by taking all the recipients of the queued cards, then putting the orders that have recipient names matching the filter into a visibleOrderIDs array
		 * 
		 * @param  string name
		 */
		$scope.recipientNameFilter = function(name) {

			queuedCards = $scope.queuedCards;
			queuedCardRecipients = queuedCards.map(function(card) {
				return card.recipient;
			});
			relationshipFilter = $scope.recipientsFilter;
			$scope.filteredName = name;

			name = name.toLowerCase();

			visibleRecipients = filterArray("name", name, queuedCardRecipients);
			visibleRecipientIDs = visibleRecipients.map(function(recipient) { return recipient.id });
			visibleOrderIDs = [];

			// go through all the orders and only if they have recipient name that matches the filter
			for (var i = 0; i < queuedCards.length; i++) {
				order = queuedCards[i];
				if (isInArray(order.recipient.id, visibleRecipientIDs)) {
					visibleOrderIDs.push(order.id);
				}
			}

			// set the view's queued card "visibility" here
			for (var i = 0; i < queuedCards.length; ++i) {
				queuedCard = queuedCards[i];
				if (isInArray(queuedCard.id, visibleOrderIDs)) {
					queuedCard.is_visible = 1;
				} else {
					queuedCard.is_visible = 0;
				}
			}

		};

		/**
		 * 			SELECTED CARDS FUNCTIONS
		 */
		
		// if it is in selectedOrders array -- remove it.
		// if not -- add it
		$scope.toggleInSelectedOrdersArray = function(order) {

			selectedOrderIDs = $scope.selectedOrderIDs;
			orderID          = order.id;

			if (isInArray(orderID, selectedOrderIDs)) {
				var index = selectedOrderIDs.indexOf(orderID);
				if (index > -1) {
					$scope.selectedOrderIDs.splice(index, 1);
				}
			} else {
				$scope.selectedOrderIDs.push(orderID);
			}
		}

		// checks if this order's ID is in the selectedOrderIDs
		$scope.isInSelectedOrdersArray = function(order) {

			selectedOrderIDs = $scope.selectedOrderIDs;
			orderID          = order.id;

			orderInArray = false;
			for (var i = 0; i < selectedOrderIDs.length; i++) {
				if (orderID == selectedOrderIDs[i]) {
					orderInArray = true;
					break;
				}
			}
			return orderInArray;

		}

		// allows you to toggle between having all queued cards selected or not
		$scope.toggleSelectAllQueuedCards = function() {

			queuedCards = $scope.queuedCards;
			queuedCardIDs = queuedCards.map(function(card) {
				return card.id;
			});

			if ($scope.allQueuedCardsAreSelected()) {
				$scope.selectedOrderIDs = [];
			} else {
				$scope.selectedOrderIDs = queuedCardIDs;
			}

		}

		// checks to see if all queued cards are already selected or not
		$scope.allQueuedCardsAreSelected = function() {

			allQueuedCardsAreSelected = true;

			queuedCards = $scope.queuedCards;
			queuedCardIDs = queuedCards.map(function(card) {
				return card.id;
			});

			selectedOrderIDs = $scope.selectedOrderIDs;

			// if even one of the IDs is not in the queuedCardIDs array, then this is not true
			for (var i = 0; i < queuedCardIDs.length; i++) {
				if (!isInArray(queuedCardIDs[i], selectedOrderIDs)) {
					allQueuedCardsAreSelected = false;
					break;
				}
			}

			return allQueuedCardsAreSelected;
		}

		/**
		 * get cards that are selected for checkout to purchase them
		 * this will be done by holding the selected order IDs in an array so we know exactly which ones the user 'selected' for purchase checkout
		 */
		$scope.checkout = function() {

			queuedCards      = $scope.queuedCards;
			selectedOrderIDs = $scope.selectedOrderIDs;

			$state.go("main.app.checkout.home", {selected_order_ids: selectedOrderIDs });

		}

	});

})();
