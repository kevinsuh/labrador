(function() {

	/**
	 * 		NOTES:
	 * 		1. finalOptions is what is submitted to user 
	 * 		2. when INFO HAS NOT YET BEEN ENTERED BEFORE, firstTimeAddress / firstTimePayment will be called. this will automatically save to your account then never be called for future checkouts for that user
	 * 		3. you can enter NEW info via newAddress / newPayment
	 * 		4. this means that shipping info + payment method have: a. finalOption b. listOptions c. newOption d. firstTimeOption -- as well as update functionality of existing cards
	 * 		5. we look out for front-end validity of checkout via addressIsFilled and paymentIsFilled. If these are BOTH true, then the purchase button will show automatically
	 * 		6. submitOrder will look for firstTimeAddress or firstTimePayment. these will both be false if it is not the user's first time. if it is the first time, it will try to create it first before processing any orders
	 * 		7. for stripe, you must create the stripe customer and then attach the card for firstTimeCheckout.
	 */
	
	/**
	 * this is the controller used to handle checkout of the cards you queued
	 */
	var app = angular.module('card-queue').controller("CheckoutController", function($rootScope, $location, $window, $scope, $state, $stateParams, $timeout, usSpinnerService, user, cards, stripe) {

		$scope.selectedCardsForPurchase = cards.selectedCardsForPurchase;
		console.log(cards);
		
		/**
		 * 			CONFIGURATION FOR CHECKOUT CONTROLLER
		 */

		headerTitle = angular.element(document.querySelector("#currentTitle"));
		headerTitle.text("Checkout");

		$scope.user                     = user.currentUser;
		$scope.stripe_customer          = $scope.user.stripe_customer
		$scope.cards                    = cards;
		$scope.queuedCards              = cards.queuedCards;
		$scope.selectedCardsForPurchase = cards.selectedCardsForPurchase; // this is the initial choice of the user

		// temp. hack that if selectedCardsForPurchase is 0, then we will default to all of your queued cards. this will handle refresh and also coming in from the queue wizard
		if (cards.selectedCardsForPurchase.length == 0) {
			$scope.selectedCardsForPurchase = cards.queuedCards;
		}

		// the options to attach with this order
		$scope.finalOptions = {
			address: $scope.user.primary_address,
			payment: $scope.user.primary_card,
			cards: angular.copy($scope.selectedCardsForPurchase) // this is what will go through for final purchase
		};

		// handling first time address / card
		$scope.firstTimeAddress = {
			is_primary: true
		};
		if ($scope.user.primary_address) {
			$scope.firstTimeAddress = false;
		}

		$scope.firstTimePayment = {
			is_primary: true,
			same_as_shipping_address: true
		};
		if ($scope.user.primary_card != 'undefined' && $scope.user.primary_card != undefined) {
			$scope.firstTimePayment = false;

			// iterate through to find the primary credit card if it is not their first time paying
			// since there is no "primary_card" like we have primary_address

			payments = $scope.user.stripe_customer.sources.data;
			for (var i = 0; i < payments.length; i++) {
				if (payments[i].id == $scope.user.primary_card.id) {
					$scope.user.stripe_customer.sources.data[i].is_primary = true;
				}
			}

		}

		// for handling new and updating addresses /cards
		$scope.editingAddress = {};
		$scope.newAddress     = {};

		$scope.editingPayment = {};
		$scope.newPayment     = {};
		
		// to handle toggling of displays
		$scope.viewAddressList     = false;
		$scope.viewNewAddressForm  = false;
		$scope.viewEditAddressForm = false;
		$scope.viewSelectedAddress = true;
		
		$scope.viewPaymentList     = false;
		$scope.viewNewPaymentForm  = false;
		$scope.viewEditPaymentForm = false;
		$scope.viewSelectedPayment = true;

		console.log($scope.user);
		console.log($scope.stripe_customer);
		console.log($scope.queuedCards);
		console.log($scope.finalOptions);

		// validate that both address and payment card options are filled -- whether it's from saved data or first-time
		if ($scope.finalOptions.address) {
			$scope.addressIsFilled = true;
		}
		if ($scope.finalOptions.payment) {
			$scope.paymentIsFilled = true;	
		}
		$scope.$watch('finalOptions', function(finalOptions) {
			if (finalOptions.address) {
				$scope.addressIsFilled = true;
			}
			if (finalOptions.payment) {
				$scope.paymentIsFilled = true;
			}
			console.log(finalOptions);
		}, true);

		$scope.$watch('firstTimeAddress', function(address) {
			// if something exists for all the address fields
			if (address.first_name && address.last_name && address.street && address.city && address.state && address.zipcode && address.country) {
				$scope.addressIsFilled = true;
			} else {
				// if final payment is not already filled
				if (!$scope.finalOptions.address) {
					$scope.addressIsFilled = false;
				}
			}
		}, true);

		$scope.$watch('firstTimePayment', function(payment) {

			// these 2 portions must be filled for firstTimePayment to pass front-end validation
			var cardInfoIsFilled;
			var billingAddressIsFIlled;

			// CREDIT CARD SECTION
			if (payment.name && payment.number && payment.exp_month && payment.exp_year && payment.cvc) {
				cardInfoIsFilled = true;
			}	else {
				if (!$scope.finalOptions.payment) {
					cardInfoIsFilled = false;
				}
			}		

			// BILLING ADDRESS SECTION
			billing_address = payment.address;
			if (payment.same_as_shipping_address || (billing_address && billing_address.first_name && billing_address.last_name && billing_address.street && billing_address.city && billing_address.state && billing_address.zipcode && billing_address.country)) {
				billingAddressIsFIlled = true;
			} else {
				if (!$scope.finalOptions.address) {
					billingAddressIsFIlled = false;	
				}
			}

			if (!$scope.finalOptions.payment) {
				if (cardInfoIsFilled && billingAddressIsFIlled) {
					$scope.paymentIsFilled = true;
				} else {
					$scope.paymentIsFilled = false;
				}	
			}

		}, true);

		// for displaying alert messages
		$scope.addressAlerts = [];
		$scope.paymentAlerts = [];

		/**
		 * 			SHIPPING ADDRESS FUNCTIONS
		 */

		// view address list
		$scope.displayAddressList = function() {
			$scope.displayAddressView('addressList');
		}

		// selecting "use" on address list
		$scope.chooseAddress = function(address) {
			$scope.finalOptions.address = address;
			$scope.displayAddressView('selectedAddress');
			$scope.addressIsFilled      = true;
		}

		// edit single address
		$scope.editAddress = function(address) {

			// for cancel / save purposes
			$scope.editingAddress = angular.copy(address);

			$scope.displayAddressView('editAddressForm');

		}

		// create new address
		$scope.newAddressForm = function() {

			// fresh template every time
			$scope.newAddress = {
				is_primary: true
			};
			$scope.displayAddressView('newAddressForm');

		}

		// save the creating new single address
		$scope.createAddress = function() {

			newAddress = $scope.newAddress;

			// should call a function to save address
			user.createAddress(newAddress)
      .success(function(data) {
      	// nothing to do on success
      	address = data.address
      	if (address) {
      		newAddress.id = address.id	
      		$scope.user.addresses.push(newAddress);
      		$scope.displayAddressView('addressList');
      	} else {
      		// stay in here and let user know it failed
      		console.log("failed to add address");
      		$scope.addressAlerts.push({type: "danger", msg: "Failed to add address."});
      	}
      })
      .error(function(data) {
        console.log("error in user createAddress function");
        console.log(data);
      });

		}

		// save the editing single address
		$scope.updateAddress = function() {

			editedAddress = $scope.editingAddress;

			// call a function to save address
			user.updateAddress(editedAddress)
      .success(function(data) {
      	address = data.address;
      	if (address) {

					$scope.displayAddressView('addressList');

					// update address on client-side view
      		addresses = $scope.user.addresses;
					for (var i = 0; i < addresses.length; i++) {
						if (addresses[i].id == editedAddress.id) {
							$scope.user.addresses[i] = editedAddress;
						}
					}
      	} else {
      		// stay in here and let user know it failed
      		console.log("failed to add address");
      		$scope.addressAlerts.push({type: "danger", msg: "Failed to update address."});
      	}
      })
      .error(function(data) {
        console.log("error in user saveAddress function");
        console.log(data);
      });	
		}

		// cancel the editing single address
		// for now, this means just return to address list view
		$scope.cancelAddressSave = function() {

			$scope.displayAddressView('addressList');
			
		}

		/**
		 * 			PAYMENT METHOD FUNCTIONS
		 */
		
		// view payment list
		$scope.displayPaymentList = function() {
			$scope.displayPaymentView('paymentList');
		}

		// selecting "use" on payment list
		$scope.choosePayment = function(payment) {
			$scope.finalOptions.payment = payment;
			$scope.displayPaymentView('selectedPayment');
			$scope.paymentIsFilled = true;
		}

		$scope.newPaymentForm = function() {
			// fresh template every time
			$scope.newPayment = {
				is_primary: true,
				same_as_shipping_address: true
			}; // default suggest new payment methods to be primary
			$scope.displayPaymentView('newPaymentForm');
		}

		// edit single payment method
		$scope.editPayment = function(payment) {

			// for cancel / save purposes
			$scope.editingPayment = angular.copy(payment);

			$scope.displayPaymentView('editPaymentForm');
		}

		// cancel the editing single payment methdo
		// simply returns to the payment list
		$scope.cancelPaymentSave = function() {
			$scope.displayPaymentView('paymentList');
		}

		// save the creating new single payment
		$scope.createPayment = function() {

			newPayment      = $scope.newPayment;
			shippingAddress = $scope.finalOptions.address;

			if (newPayment.same_as_shipping_address) {
				newPayment.address = shippingAddress;
			}

			return stripe.card.createToken({
				number: newPayment.number,
				cvc: newPayment.cvc,
				exp_month: newPayment.exp_month,
				exp_year: newPayment.exp_year,
				name: newPayment.name,
				address_line1: newPayment.address.street,
				address_city: newPayment.address.city,
				address_state: newPayment.address.state,
				address_zip: newPayment.address.zipcode,
				address_country: newPayment.address.country
			})
			.then(function(data) {
				
				cardToken = data.id;
				card      = data.card;

				// save this to our database now
				user.createPayment(cardToken)
				.success(function(data) {

					// this is where you can now bring them back to card list
    		 	$scope.user.stripe_customer.sources.data.push(card);
      		$scope.displayPaymentView('paymentList');
					
				})
				.error(function(data) {
					console.log("error in user createPayment function");
					console.log(data);
				});
			})
			.catch(function(err) {
				if (err.type && /^Stripe/.test(err.type)) {
          console.log('Stripe error: ', err.message);
        }
        $scope.paymentAlerts.push({type: "danger", msg: err.message});
			});
			
		}

		// save the editing single address
		$scope.updatePayment = function() {

			editedPayment = $scope.editingPayment;

			// call a function to save address
			user.updatePayment(editedPayment)
      .success(function(data) {
      	payment = data.payment;
      	if (payment) {

      		// update payment on client-side view
      		payments = $scope.user.stripe_customer.sources.data;
      		for (var i = 0; i < payments.length; i++) {
						if (payments[i].id == editedPayment.id) {
							$scope.user.stripe_customer.sources.data[i] = editedPayment;
						}
					}

					$scope.displayPaymentView('paymentList');

      	} else {
      		// let user know it failed
  		 		console.log("failed to update card");
      		$scope.paymentAlerts.push({type: "danger", msg: "Failed to update card."});
      	}
      	
      })
      .error(function(data) {
        console.log("error in user updatePayment function");
        console.log(data);
      });	
		}

		/**
		 * 			CARDS FUNCTIONS
		 */
		
		// if it is in cards array -- remove it.
		// if not -- add it
		$scope.toggleInFinalCardsArray = function(card) {

			finalCards = $scope.finalOptions.cards;
			finalCardIDs = finalCards.map(function(card) {
				return card.id;
			});

			cardID = card.id;

			if (isInArray(cardID, finalCardIDs)) {
				var index = finalCardIDs.indexOf(cardID);
				if (index > -1) {
					$scope.finalOptions.cards.splice(index, 1);
				}
			} else {
				$scope.finalOptions.cards.push(card);
			}
		}

		// checks if that card is in the finalOptions.cards array
		$scope.isInFinalCardsArray = function(card) {

			cardID = card.id;
			finalCardOptions = $scope.finalOptions.cards;

			cardInArray = false;
			for (var i = 0; i < finalCardOptions.length; i++) {
				if (cardID == finalCardOptions[i].id) {
					cardInArray = true;
					break;
				}
			}
			return cardInArray;

		}

		/**
		 * 			SUBMIT ORDER
		 */
		$scope.submitOrder = function() {

			// 2 paths. either both are saved, or one of them is firstTime
			// if at least one is firstTime, then you must go through separate process of purchasing
			// otherwise, we can use the saved information and go with it since that means finalOptions has already been set with the user's choices
			
			if ($scope.firstTimeAddress || $scope.firstTimePayment) {

				// FIRST TIME ENTERING ADDRESS
				if ($scope.firstTimeAddress) {
					firstTimeAddress = $scope.firstTimeAddress;
					user.createAddress(firstTimeAddress)
		      .success(function(data) {
		      	
		      	// attach to finalOptions on success
		      	address = data.address
		      	if (address) {
		      		$scope.finalOptions.address = address;
		      	} else {
		      		// stay in here and let user know it failed
		      		console.log("failed to create address");
		      		$scope.addressAlerts.push({type: "danger", msg: "Failed to add address."});
		      	}
		      })
		      .error(function(data) {
		        console.log("error in submit order createAddress function");
		        console.log(data);
		      });
				}

				// FIRST TIME ENTERING PAYMENT
				if ($scope.firstTimePayment) {

					firstTimePayment = $scope.firstTimePayment;

					// shipping address for firstTimeAddress, or saved address
					if ($scope.firstTimeAddress) {
						shippingAddress = $scope.firstTimeAddress;
					} else {
						shippingAddress = $scope.finalOptions.address;
					}

					// same as shipping address, or manually inputed address
					if (firstTimePayment.same_as_shipping_address) {
						firstTimePayment.address = shippingAddress;
					}

					stripe.card.createToken({
						number: firstTimePayment.number,
						cvc: firstTimePayment.cvc,
						exp_month: firstTimePayment.exp_month,
						exp_year: firstTimePayment.exp_year,
						name: firstTimePayment.name,
						address_line1: firstTimePayment.address.street,
						address_city: firstTimePayment.address.city,
						address_state: firstTimePayment.address.state,
						address_zip: firstTimePayment.address.zipcode,
						address_country: firstTimePayment.address.country
					})
					.then(function(data) {
						
						cardToken = data.id;
						card      = data.card;

						// save this to our database now
						user.createPayment(cardToken)
						.success(function(data) {

							// attach to finalOptions on success
							// exit here if payment AND address is successfully saved
		    		 	$scope.finalOptions.payment = card;
		    		 	if ($scope.finalOptions.payment && $scope.finalOptions.address) {
		    		 		$scope.purchaseCards($scope.finalOptions);
		    		 		return;
		    		 	}

						})
						.error(function(data) {
							console.log("error in submit order createPayment function");
							console.log(data);
						});
						
					})
					.catch(function(err) {
						if (err.type && /^Stripe/.test(err.type)) {
		          console.log('Stripe error: ', err.message);
		        }
		        $scope.paymentAlerts.push({type: "danger", msg: err.message});
					});

				}

			} else { // both have been saved before
				$scope.purchaseCards($scope.finalOptions);
			}
			
		}

		// this is what will get pushed for the final purchasing of thecards
		$scope.purchaseCards = function(finalOptions) {

			shippingAddress = finalOptions.address;
			payment         = finalOptions.payment;
			orders          = finalOptions.cards;

			shippingAddressID = shippingAddress.id;
			paymentID         = payment.id;
			orderIDs          = orders.map(function(order) {
				return order.id;
			});

			// 1. charge the card and if successful, then update everything
			cards.submitOrder(shippingAddressID, paymentID, orderIDs)
			.success(function(data) {
        console.log("in submitOrder function of purchaseCards");
        console.log(data);
        success = data.success;
        
        if (success) {
        	orderIDs = data.order_ids;
        	console.log("success for these order IDs:");
        	console.log(orderIDs);

        	// let's go to root for now
	        // this will eventually be receipt page
	        $state.go("main.app.greeting_central");
	        
        } else {
        	console.log("FAILURE!!!");
        	console.log(data.message);
        }
      });

		}


    // helper function to display specific address view
    $scope.displayAddressView = function(view) {

			$scope.viewAddressList     = false;
			$scope.viewNewAddressForm  = false;
			$scope.viewEditAddressForm = false;
			$scope.viewSelectedAddress = false;
			
			$scope.addressIsFilled     = false;

			if (view == 'addressList') {
				$scope.viewAddressList = true;
			} else if (view == 'newAddressForm') {
				$scope.viewNewAddressForm  = true;	
			} else if (view == 'editAddressForm') {
				$scope.viewEditAddressForm = true;
			} else if (view == 'selectedAddress') {
				$scope.viewSelectedAddress = true;
			}

    }

    // helper function to display specific payments view
    $scope.displayPaymentView = function(view) {

			$scope.viewPaymentList     = false;
			$scope.viewNewPaymentForm  = false;
			$scope.viewEditPaymentForm = false;
			$scope.viewSelectedPayment = false;
			
			$scope.paymentIsFilled     = false;

			if (view == 'paymentList') {
				$scope.viewPaymentList = true;
			} else if (view == 'newPaymentForm') {
				$scope.viewNewPaymentForm  = true;	
			} else if (view == 'editPaymentForm') {
				$scope.viewEditPaymentForm = true;
			} else if (view == 'selectedPayment') {
				$scope.viewSelectedPayment = true;
			}

    }

    $scope.closeAddressAlert = function(index) {
	    $scope.addressAlerts.splice(index, 1);
	  };

	  $scope.closePaymentAlert = function(index) {
	    $scope.paymentAlerts.splice(index, 1);
	  };


	});

})();
