(function() {
	
	/**
	 * this is the controller used to handle checkout of the cards you queued
	 */
	var app = angular.module('card-queue').controller("CheckoutController", function($rootScope, $location, $window, $scope, $state, $timeout, usSpinnerService, user, cards) {
		
		/**
		 * 			CONFIGURATION FOR CHECKOUT CONTROLLER
		 */

		headerTitle = angular.element(document.querySelector("#currentTitle"));
		headerTitle.text("Checkout");

		$scope.user            = user.currentUser;
		$scope.stripe_customer = $scope.user.stripe_customer
		$scope.cards           = cards;
		$scope.queuedCards     = cards.queuedCards;

		console.log($scope.user);
		console.log($scope.stripe_customer);

		// the options to attach with this order
		$scope.finalOptions = {
			address: $scope.user.primary_address,
			payment: $scope.user.primary_card
		};

		// iterate through to find the primary credit card
		// since there is no "primary_card" like we have primary_address
		payments = $scope.user.stripe_customer.sources.data;
		for (var i = 0; i < payments.length; i++) {
			if (payments[i].id == $scope.user.primary_card.id) {
				$scope.user.stripe_customer.sources.data[i].is_primary = true;
			}
		}

		// handling first time address / card
		$scope.firstTimeAddress = {};
		if ($scope.user.primary_address) {
			$scope.firstTimeAddress = false;
		}

		$scope.firstTimePayment = {};
		if ($scope.user.primary_card) {
			$scope.firstTimePayment = false;
		}

		// for handling new and updating addresses /cards
		$scope.editingAddress = {};
		$scope.newAddress     = {};

		$scope.editingPayment = {};
		$scope.newPayment     = {};
		
		// to handle toggling of displays
		$scope.viewAddressList     = false;
		$scope.viewNewAddressForm  = false;
		$scope.viewEditAddressForm = false;
		$scope.viewSelectedAddress = true;
		
		$scope.viewPaymentList     = false;
		$scope.viewNewPaymentForm  = false;
		$scope.viewEditPaymentForm = false;
		$scope.viewSelectedPayment = true;

		// validate that both address and payment card options are filled -- whether it's from saved data or first-time
		$scope.addressIsFilled = $scope.user.primary_address
		$scope.paymentIsFilled = $scope.user.primary_card

		$scope.$watch('firstTimeAddress', function(address) {
			// if something exists for all the fields, then we are good to go
			if (address.first_name && address.last_name && address.street && address.city && address.state && address.zipcode && address.country) {
				$scope.addressIsFilled = true;
			}
		}, true);

		// $scope.$watch('firstTimePayment', function(payment) {
		// 	// if something exists for all the fields, then we are good to go
		// 	if (address.first_name && address.last_name && address.street && address.city && address.state && address.zipcode && address.country) {
		// 		$scope.addressIsFilled = true;
		// 	}
		// }, true);

		// for displaying alert messages
		$scope.addressAlerts = [];
		$scope.paymentAlerts = [];

		/**
		 * 			SHIPPING ADDRESS FUNCTIONS
		 */

		// view payment list
		$scope.displayPaymentList = function() {
			$scope.displayPaymentView('paymentList');
		}

		// selecting "use" on payment list
		$scope.choosePayment = function(payment) {
			$scope.finalOptions.payment = payment;
			$scope.displayPaymentView('selectedPayment');
		}

		// edit single payment method
		$scope.editPayment = function(payment) {

			// for cancel / save purposes
			$scope.editingPayment = angular.copy(payment);

			$scope.displayPaymentView('editPaymentForm');
		}

		// cancel the editing single payment methdo
		// simply returns to the payment list
		$scope.cancelPaymentSave = function() {
			$scope.displayPaymentView('paymentList');
		}

		// save the editing single address
		$scope.updatePayment = function() {

			editedPayment = $scope.editingPayment;

			// call a function to save address
			user.updatePayment(editedPayment)
      .success(function(data) {
      	payment = data.payment;
      	if (payment) {

      		$scope.displayPaymentView('paymentList');

      		// update payment on client-side view
      		payments = $scope.user.stripe_customer.sources.data;
      		for (var i = 0; i < payments.length; i++) {
						if (payments[i].id == editedPayment.id) {
							$scope.user.stripe_customer.sources.data[i] = editedPayment;
						}
					}

      	} else {
      		// let user know it failed
  		 		console.log("failed to update card");
      		$scope.paymentAlerts.push({type: "danger", msg: "Failed to update card."});
      	}
      	
      })
      .error(function(data) {
        console.log("error in user updatePayment function");
        console.log(data);
      });	
		}



		// view address list
		$scope.displayAddressList = function() {
			$scope.displayAddressView('addressList');
		}

		// selecting "use" on address list
		$scope.chooseAddress = function(address) {
			$scope.finalOptions.address = address;
			$scope.displayAddressView('selectedAddress');
		}

		// edit single address
		$scope.editAddress = function(address) {

			// for cancel / save purposes
			$scope.editingAddress = angular.copy(address);

			$scope.displayAddressView('editAddressForm');

		}

		// create new address
		$scope.newAddressForm = function() {

			// fresh template every time
			$scope.newAddress = {};
			$scope.displayAddressView('newAddressForm');

		}

		// save the creating new single address
		$scope.createAddress = function() {

			newAddress = $scope.newAddress;

			// should call a function to save address
			user.createAddress(newAddress)
      .success(function(data) {
      	// nothing to do on success
      	address = data.address
      	if (address) {
      		newAddress.id = address.id	
      		$scope.user.addresses.push(newAddress);
      		$scope.displayAddressView('addressList');
      	} else {
      		// stay in here and let user know it failed
      		console.log("failed to add address");
      		$scope.addressAlerts.push({type: "danger", msg: "Failed to add address."});
      	}
      })
      .error(function(data) {
        console.log("error in user createAddress function");
        console.log(data);
      });

		}

		// save the editing single address
		$scope.updateAddress = function() {

			editedAddress = $scope.editingAddress;

			// call a function to save address
			user.updateAddress(editedAddress)
      .success(function(data) {
      	address = data.address;
      	if (address) {

					$scope.displayAddressView('addressList');

					// update address on client-side view
      		addresses = $scope.user.addresses;
					for (var i = 0; i < addresses.length; i++) {
						if (addresses[i].id == editedAddress.id) {
							$scope.user.addresses[i] = editedAddress;
						}
					}
      	} else {
      		// stay in here and let user know it failed
      		console.log("failed to add address");
      		$scope.addressAlerts.push({type: "danger", msg: "Failed to update address."});
      	}
      })
      .error(function(data) {
        console.log("error in user saveAddress function");
        console.log(data);
      });	
		}

		// cancel the editing single address
		// for now, this means just return to address list view
		$scope.cancelAddressSave = function() {

			$scope.displayAddressView('addressList');
			
		}

		/**
		 * 			PAYMENT METHOD FUNCTIONS
		 */


    // helper function to display specific address view
    $scope.displayAddressView = function(view) {

    	$scope.viewAddressList     = false;
			$scope.viewNewAddressForm  = false;
			$scope.viewEditAddressForm = false;
			$scope.viewSelectedAddress = false;

			if (view == 'addressList') {
				$scope.viewAddressList = true;
			} else if (view == 'newAddressForm') {
				$scope.viewNewAddressForm  = true;	
			} else if (view == 'editAddressForm') {
				$scope.viewEditAddressForm = true;
			} else if (view == 'selectedAddress') {
				$scope.viewSelectedAddress = true;
			}

    }

    // helper function to display specific payments view
    $scope.displayPaymentView = function(view) {

    	$scope.viewPaymentList     = false;
			$scope.viewNewPaymentForm  = false;
			$scope.viewEditPaymentForm = false;
			$scope.viewSelectedPayment = false;

			if (view == 'paymentList') {
				$scope.viewPaymentList = true;
			} else if (view == 'newPaymentForm') {
				$scope.viewNewPaymentForm  = true;	
			} else if (view == 'editPaymentForm') {
				$scope.viewEditPaymentForm = true;
			} else if (view == 'selectedPayment') {
				$scope.viewSelectedPayment = true;
			}

    }

    $scope.closeAddressAlert = function(index) {
	    $scope.addressAlerts.splice(index, 1);
	  };

	  $scope.closePaymentAlert = function(index) {
	    $scope.paymentAlerts.splice(index, 1);
	  };


	});

})();
