(function() {
	
	/**
	 * this controller is specific for user viewing his queued / purchased cards
	 */
	var app = angular.module('card-queue').controller("OccasionsController", function($rootScope, $location, $window, $scope, $state, $timeout, occasions) {

		$scope.occasions                   = occasions; // factory object
		$scope.currentOccasions            = occasions.currentOccasions;
		$scope.currentOccasionsByRecipient = occasions.currentOccasionsByRecipient;
		$scope.selectedOccasionIDs = occasions.selectedOccasionIDs;
		$scope.selectedOccasions = occasions.selectedOccasions;


		// concat first and last name
		$scope.recipientFullName = function(recipient) {
			return recipient.first_name + " " + recipient.last_name;
		}

		// new manage relationships feature!
		// $scope.recipients               = recipients; // the "factory" recipients object
		// $scope.relationships            = recipients.relationships;
		// $scope.currentRecipients        = recipients.currentRecipients;
		// $scope.newRecipient             = recipients.newRecipient;
		// $scope.newRecipientTemplate     = recipients.newRecipientTemplate;
		// $scope.relationships            = recipients.relationships;
		// $scope.occasions                = cards.occasions;
		// $scope.selectedRecipients       = recipients.selectedRecipients;
		// $scope.selectedRecipientIDs     = recipients.selectedRecipientIDs;

		// infinite scroll once this angular controller is loaded
		ScaleContentToDevice();

		headerTitle = angular.element(document.querySelector("#currentTitle"));
		$scope.currentTitle = "Occasions";
		headerTitle.text($scope.currentTitle);

		// test whether you are currently at this state or not
		$scope.$on('$stateChangeSuccess',
		  function(event, toState) {
		    $scope.currentState = toState.name;
		    makeStateActive($scope.currentState);
		  });

		// revert the work that was done
		$scope.cancelOccasion = function() {
			$scope.selectedOccasion = angular.copy($scope.selectedOccasionTemplate);
			$scope.currentOccasions = angular.copy($scope.currentOccasionsTemplate);

			$scope.addOccasionActive = false;
			$scope.deleteOccasionActive = false;
			$scope.searchOccasionActive = false;
		}

		/**
		 * 		OCCASIONS HEADER
		 */
		$scope.addOccasionActive = false;
		$scope.deleteOccasionActive = false;
		$scope.searchOccasionActive = false;

		$scope.addOccasionToggle = function() {

			// disabled if currently on recipient_form
			if ($scope.addOccasionActive) {
				return;
			}

			// this will also lead to new recipient form
			$scope.isNewOccasion = true;
			$scope.selectedOccasion = angular.copy($scope.newOccasionTemplate);

			// create backups in case user cancels
			$scope.selectedOccasionTemplate = angular.copy($scope.selectedOccasion);
			$scope.currentOccasionsTemplate = angular.copy($scope.currentOccasions);

			$scope.addOccasionActive = !$scope.addOccasionActive;
			$scope.deleteOccasionActive = false;
			$scope.searchOccasionActive = false;
		}

		$scope.deleteOccasionToggle = function() {

			// disabled if currently on recipient_form
			if ($scope.addOccasionActive) {
				return;
			}

			// must need at least one recipient to delete
			if ($scope.selectedOccasionIDs == 0) {
				$scope.deleteOccasionActive = false;
			} else {
				$scope.deleteOccasionActive = !$scope.deleteOccasionActive;
				$scope.addOccasionActive = false;
				$scope.searchOccasionActive = false;
			}
			
		}

		$scope.searchOccasionToggle = function() {

			// disabled if currently on recipient_form
			if ($scope.addOccasionActive) {
				return;
			}

			$scope.searchOccasionActive = !$scope.searchOccasionActive;
			$scope.deleteOccasionActive = false;
			$scope.addOccasionActive = false;
		}

		// this is for the trash delete button in the occasions view
		$scope.deleteSelectedOccasions = function() {
			selectedOccasionIDs = $scope.selectedOccasionIDs;
			occasions = $scope.occasions;
			occasions.deleteOccasions(selectedOccasionIDs)
			.success(function(data) {
				
				// upon success, delete all the currentOccasions that you deleted on the server side
				deletedOccasions = data.occasions;
				deletedOccasionIDs = deletedOccasions.map(function(occasion) {
					return occasion.id;
				});
				currentOccasions = $scope.currentOccasions;
				currentOccasionIDs = currentOccasions.map(function(occasion) {
					return occasion.id;
				});

				// this will go through each deletedOccasionID and remove currentOccasions of that occasionID
				$.each(deletedOccasionIDs, function(i) {
					occasionID = deletedOccasionIDs[i];
					if (isInArray(occasionID, currentOccasionIDs)) {
						
						var index = currentOccasionIDs.indexOf(occasionID);
						if (index > -1) {
							// splice both to keep the currentRecipientIDs array syncd with the scope.currentRecipients array
							currentOccasionIDs.splice(index, 1);
							$scope.currentOccasions.splice(index, 1);
						}
					}
				});
				// remove that delete active button
				$scope.deleteOccasionActive = false;
			})
			.error(function(data) {
				console.log("error in delete selected occasions of occasions controller");
				console.log(data);
			})

		}

		$scope.select = function(occasion) {
			occasion_ids = $scope.selectedOccasionIDs;

			if (isInArray(occasion.id, occasion_ids)) {
				$scope.selectedOccasionIDs = arrayWithValueRemoved(occasion.id, $scope.selectedOccasionIDs);
				$scope.selectedOccasions = arrayWithValueRemoved(occasion, $scope.selectedOccasions);
			} else {
				$scope.selectedOccasionIDs.push(occasion.id);
				$scope.selectedOccasions.push(occasion);
			}
		};

		$scope.isInArray = function(value, array) {
		  return array.indexOf(value) > -1;
		}

		/**
		 * get the occasion names based on array of selected occasions!
		 */
		$scope.occasionNames = function() {
			
			occasions = $scope.selectedOccasions;
			occasion_names = occasions.map(function(elem) {
				return elem.occasion.name + " for " + elem.recipient.first_name + " " + elem.recipient.last_name;
			});

			text = '';
			if (occasion_names.length > 0) {
				
				text        = '';
				conjunction = "and";
				comma       = '';
				ctr         = 1;
				max_names   = 10; // max # of names to show before we default to "others"
				
				keepGoing   = true;
				angular.forEach(occasion_names, function(value) {

					if (keepGoing) {

						// this is where you will add the final value
		  			if (ctr == max_names) {
		  				keepGoing = false;

							remaining_count = (occasion_names.length+1) - ctr;
							other           = remaining_count > 1 ? "others" : "other";
							comma           += conjunction+' ';
							text            += comma + " " + remaining_count + " " + other;

		  			} else {

		  				text += comma+value;
							ctr++;
							if(occasion_names.length > 2){
								comma = ', ';
							} else {
								comma = ' ';
							}
							if(ctr == occasion_names.length) {
								comma += conjunction+' ';
							}
		  			}

					}
				})
			}
			return text;
		}

		$scope.filteredName = "";
		$scope.occasionNameFilter = function(name) {

			currentOccasions = $scope.currentOccasions;
			occasionFilter = $scope.occasionsFilter;

			$scope.filteredName = name;
			name = name.toLowerCase();

			visibleOccasions =  filterOccasionArrayByRecipientName(name, currentOccasions);
			visibleOccasionIDs = visibleOccasions.map(function(item) { return item["id"]; });

			// use visible recipients to get the IDs
			for (index = 0; index < $scope.currentOccasions.length; ++index) {
				occasion = $scope.currentOccasions[index];
				occasion_id = occasion.id
				if (isInArray(occasion_id, visibleOccasionIDs)) {
					occasion.is_visible = 1;
				} else {
					occasion.is_visible = 0;
				}
			}
		};

	});

})();
